{"version":3,"sources":["store/actions/authActions.js","store/actions/actionConstants.js","components/SignedInLinks.js","components/Header.js","components/Wrapper/Drawer.js","components/GlobalUrl.js","components/api/menu.js","store/actions/sourceActions.js","components/PopUpMessages.js","components/ComponentHeading.js","store/actions/projectActions.js","components/loaders/CircleLoader.js","components/BooksDownloadable.js","components/DownloadDraft.js","store/actions/dialogActions.js","components/UploadTexts.js","components/CreateSources.js","components/ViewSources.js","components/Users/UserDrawer.js","components/Users/ListUserProjects.js","components/Translations/MenuBar.js","components/Translations/TokenList.js","components/Translations/Concordance.js","components/Translations/TranslationNotes.js","components/Translations/TranslationWords.js","components/Translations/UpdateTokens.js","components/Translations/HomePage.js","store/actions/organisationActions.js","components/Assignments/CreateOrganisations.js","components/Users/UserDashboard.js","components/Administration/CreateProject.js","components/Administration/ListProjects.js","components/Administration/CreateOrganisation.js","components/Administration/ListOrganisations.js","store/actions/userActions.js","components/Administration/ListUsers.js","components/StatisticsSummary.js","components/Assignments/AssignUser.js","components/Translations/MyProjects.js","components/Wrapper/index.js","components/HomePage.js","components/SignUp.js","components/LoginPage.js","App.js","serviceWorker.js","store/reducers/sourceReducer.js","store/reducers/authReducer.js","store/reducers/dialogReducer.js","store/reducers/projectReducer.js","store/reducers/organisationReducer.js","store/reducers/userReducer.js","store/reducers/rootReducer.js","index.js"],"names":["clearState","type","setCurrentUser","current_user","SignedInLinks","state","anchorEl","logOut","_this","props","dispatch","localStorage","removeItem","window","location","handleMenu","event","setState","currentTarget","handleClose","this","react_default","a","createElement","Menu","open","Boolean","onClose","MenuItem","react_router_dom","to","onClick","className","classes","link","decoded","isMenuOpen","accessToken","jwt_decode","currentDate","Date","getTime","expiry","exp","firstName","console","log","color","style","padding","charAt","toUpperCase","slice","IconButton","aria-owns","undefined","aria-haspopup","AccountCircle_default","getMenuItems","paddingTop","paddingRight","Component","connect","auth","withStyles","role","theme","root","display","backgroundColor","zIndex","margin","spacing","textDecoration","h1","grow","flexGrow","_ref","react","Grid","container","position","width","item","xs","paddingLeft","Typography","variant","textAlign","components_SignedInLinks","apiUrl","menus","name","roles","key","child","getItem","DrawerPane","expanded","handleDashboard","text","handleOrganisations","handleStatistics","createOrganisations","handleUsers","handleCharts","createProjects","listMyProjects","checkWhat","history","push","data","updateState","organisationsStatus","fetch","method","headers","Authorization","json","organisationsData","map","organisationId","verified","listOrganisationsPane","listUsersPane","createProjectsPane","listProjectsPane","assignmentsPane","listUserProjectsPane","_this2","_this$props","menu","includes","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore_default","heading","List","childMenu","ListItem","button","ListItemText","disableTypography","divider","primary","fetchBibleLanguages","Object","asyncToGenerator","regenerator_default","mark","_callee","lang","biblesDetails","wrap","_context","prev","next","setIsFetching","sent","setBibleLanguages","t0","swal","title","icon","stop","_x","apply","arguments","fetchSourceBooks","sourceId","_ref3","_callee3","response","_context3","message","setSourceBooks","_x3","createSource","apiData","close","_ref4","_callee4","postVersions","myJson","_context4","body","JSON","stringify","success","_x4","uploadBibleTexts","book","_ref5","_callee5","_context5","setUploadError","setCompletedUpload","_x5","status","books","bibleLanguages","setAllLanguages","allLanguages","selectProject","project","getState","displaySnackBar","popUp","PopUpMessages","snackBarHandleClose","reason","snackBarOpen","snackBarMessage","snackBarVariant","snackColor","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","SnackbarContent","sources","ComponentHeading","_this$props$data","styleColor","align","Divider","fontSize","FileSaver","require","fetchProjects","projectLists","setProjects","createProject","_ref2","_callee2","_context2","then","msg","_x2","fetchUserProjects","setUserProjects","getTranslatedText","projectId","bookList","projectName","_ref6","_callee6","usfmTexts","_context6","translatedUsfmText","keys","blob","Blob","saveAs","split","_x6","updateTransaltion","clear","_ref7","_callee7","update","_context7","getTranslatedWords","selectedToken","selectedProject","targetId","_x7","_x8","token","targetLanguageId","_ref8","_callee8","translatedWords","_context8","translation","senses","setTranslatedWord","_x9","projects","setTokenList","tokens","setConcordance","concordance","setReference","reference","CircleLoader","BooksDownloadable","value","targetBooks","targetBooksChecked","handleChange","filter","getBooksCheckbox","_this$state","index","FormControlLabel","control","Checkbox","checked","onChange","label","handleDownload","booksPane","_this$props2","isFetching","Dialog","loaders_CircleLoader","components_ComponentHeading","DialogContent","DialogActions","Button","size","DownloadDraft","translatedTokenInfo","booksDialogOpen","handleClick","e","preventDefault","selectBooks","displayLanguage","onTargetLanguageSelection","targetLanguage","languageDetails","find","languageName","languageId","getTargetBooks","handleCardClick","booksDialog","versionDetails","getProjectData","getTranslatedTokenInfo","language","disabled","version","ver","versionContentCode","contentType","forEach","_this3","sm","md","gridRowGap","Card","cursorPointer","CardHeader","subheader","concat","organisationName","CardContent","varian","gutterBottom","components_BooksDownloadable","border","displayDraftCards","components_PopUpMessages","cursor","grammar","UploadTexts","fileContent","parsedUsfm","disableUpload","progress","handleFileRead","content","fileReader","result","jsonOutput","parse","addFiles","filesObj","target","files","filesKeys","errorFiles","handleFileChosen","handleSubmit","uploadFiles","prevProps","completedUpload","uploadErrorBooks","length","_this$state2","wholeUsfmText","parsedUsfmText","metadata","id","file","FileReader","onloadend","_this3$state","parseUSFM","ERROR","readAsText","_this$props3","dialogOpen","aria-labelledby","DialogTitle","DialogContentText","CircularProgress","multiple","htmlFor","component","Add_default","UploadSource","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","versionContentDescription","year","license","revision","languageid","contentid","languageCode","loading","counter","setLanguage","setContent","contentDetails","contentId","uploadVersionDetails","getVersionData","getLanguagesData","languageData","values","code","InputLabel","FormControl","formControl","Select","inputProps","commonjs_default","selectMenu","options","TextField","textField","required","input","resize","defaultValue","uploadPane","dialog","marginTop","minWidth","ViewSources","availableBooksData","createSourceDialog","listBooks","columns","customBodyRender","moment","format","closeDialog","defineProperty","displayBooks","sourceBooks","closeBookListing","userId","handleSelect","handleBookSelect","getBiblesData","toConsumableArray","bible","updatedDate","script","ThemeProvider","createMuiTheme","overrides","MUIDataTable","paper","boxShadow","MUIDataTableBodyRow","&:nth-child(odd)","MUIDataTableBodyCell","dist_default","selectableRows","CreateSources","Fab","aria-label","fab","bookCard","components_UploadTexts","overflowY","versionDisplay","maxHeight","overflow","bottom","right","UserDrawer","listProjects","createOrganisationsPane","Drawer_Drawer","drawer","drawerPaper","toolbar","ListUserProjects","userProjectsData","handleProjects","displayDashboard","translationPane","displayProjectCards","MenuBar","userProjects","parseInt","pathname","pop","selectedBook","labelId","compose","selectionGrid","marginLeft","borderRadius","withRouter","TokenList","tokenList","currentBook","bookData","containerGrid","getTokens","palette","secondary","height","overflowX","Concordance","currentToken","storeBCV","chapter","verse","lengthCheck","verseNum","num","toString","bcv","chapterNumber","verseNumber","bookCode","span","highlightToken","textDisplay","displayConcordance","toLowerCase","all","lineHeight","ReactMarkdown","TranslationNotes","translationNotes","currentRefse","displayTranslationNotes","source","escapeHtml","header","Content-Type","Accept","currentRef","nextProps","getTranslationNotes","TranslationWords","translationWords","getTranslationWords","aria-controls","ExpansionPanelDetails","displayTranslationWords","UpdateTokens","popupdata","sense","clearTransaltionState","updateTokenTranslation","updateTokenSense","closeSnackBar","Chip","clickable","_this$props4","inputField","justify","alignItems","displaySenses","HomePage","tNswitchChecked","tWswitchChecked","tokenPane","concordancePane","displayConcordancePane","translationWordsPane","translationNotesPane","displayTranslationWordSwitch","tokenTranslation","handleTNSwitchChange","handleTWSwitchChange","minHeight","Translations_MenuBar","Translations_TokenList","Translations_UpdateTokens","Translations_TranslationWords","Translations_Concordance","Translations_TranslationNotes","fetchOrganisations","organisations","setOrganisations","updateOrganisationVerifiedStatus","createOrganisation","CreateOrganisations","organisationAddress","organisationEmail","organisationPhone","verificationDialogOpen","Container","maxWidth","pageContainer","form","onSubmit","handleLoginSubmit","fullWidth","autoComplete","autoFocus","UserDashboard","CssBaseline","AppBar","appBar","components_Header","UserDrawer_UserDrawer","Users_ListUserProjects","Translations_HomePage","Assignments_CreateOrganisations","&:hover","background","flexShrink","mixins","CreateProject","langObj","languageVersions","displayVersions","displayOrganisations","closeButton","Close_default","dividers","dailog","virtualSelect","labelOrg","organisation","top","grey","labelOrd","ListProjects","redirect","onRowClick","rowData","react_router","Administration_CreateProject","cardHover","CreateOrganisation","ListOrganisations","row","Switch","updateOrganisationStatus","Administration_CreateOrganisation","fetchUsers","userData","setUsers","updateAdminStatus","getAssignedUsers","assignedUsers","setAssignedUsers","assignUserToProject","deleteUser","getUserBooks","setUserBooks","users","ListUsers","admin","userStatus","changeAdminStatus","userAdminAssignment","user","lastName","emailId","roleId","StatisticsSummary","statistics","getProjectStatistcs","statisticsPane","bookWiseData","projectData","completed","pending","AssignUser","userListing","availableBooks","selectUser","closeUserListing","getUserNames","listItem","handleDelete","handleSelectBooks","displayAssignedUsers","_user$user","userName","email","TableRow","TableCell","small","DeleteOutlined_default","handleBooksChecked","userBooks","checkBox","assignBooksToUser","checkedBooks","components_StatisticsSummary","addUser","marginBottom","Paper","Table","table","TableHead","TableBody","gridSize","MyProjects","PrivateRoute","rest","objectWithoutProperties","render","assign","from","Wrapper","sub","Drawer","Wrapper_PrivateRoute","exact","path","Users_UserDashboard","components_DownloadDraft","components_ViewSources","Administration_ListProjects","Administration_ListUsers","Administration_ListOrganisations","Assignments_AssignUser","Translations_MyProjects","styles","makeStyles","homePage","fontWeight","Fragment","card","CardActionArea","li","href","Transition","Slide","direction","SignUp","password","registerUser","handleOk","formData","FormData","append","alert","loginPage","Link","TransitionComponent","keepMounted","aria-describedby","LoginPage","forgotPasswordDailogOpen","verificationCodeDialogOpen","dialogEmail","verificationCode","verifiedSuccess","newPassword","authenticate","handleOpen","handleSend","forgotPassword","handleVerificationCode","resetPassword","setItem","setAccessToken","temporaryPassword","reset","forgot","App","components_LoginPage","components_SignUp","components_HomePage","components_Wrapper","hostname","match","initState","sourceReducer","action","objectSpread2","selectedBooks","selection","sourceError","authReducer","dialogReducer","initialState","reducer","rootReducer","combineReducers","projectReducer","organisationReducer","userReducer","store","createStore","applyMiddleware","thunk","ReactDOM","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c02262e5.chunk.js","sourcesContent":["import jwt_decode from 'jwt-decode';\nimport { SET_CURRENT_USER, CLEAR_STATE } from './actionConstants';\n\nexport const validateAccessToken = () => async dispatch => {\n    let decoded;\n// let tokenAliveFlag = false\n    var accessToken = localStorage.getItem('accessToken')\n    if (accessToken) {\n        decoded = jwt_decode(accessToken)\n        console.log('decoded', decoded)\n        let currentDate = new Date().getTime()\n        let expiry = decoded.exp * 1000\n        // var firstName = decoded.firstName\n        var hours = (expiry - currentDate) / 36e5\n        if(hours > 0){\n            // tokenAliveFlag = true\n            dispatch(setCurrentUser({\n                firstName: decoded.firstName,\n                lastName: decoded.lastName,\n                email: decoded.sub,\n                role: decoded.role\n            }))\n            console.log(\"logged in\")\n        }else{\n            console.log(\"logged out\")\n            window.location = '/signin'\n        }\n    }\n}\n\nexport const clearState = () => ({\n    type: CLEAR_STATE\n});\n\nexport const setAccessToken = (token) => {\n    return (dispatch, getState) => {\n        dispatch({ type: 'SET_ACCESS_TOKEN', token })\n    }\n}\n\nexport const setCurrentUser = (current_user) => ({\n    type: SET_CURRENT_USER,\n    current_user\n})","export const SET_PROJECTS = 'SET_PROJECTS';\nexport const SET_ORGANISATIONS = 'SET_ORGANISATIONS';\nexport const SET_USERS = 'SET_USERS';\nexport const SET_IS_FETCHING = 'SET_IS_FETCHING';\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';\nexport const SET_BIBLE_LANGUAGES = 'SET_BIBLE_LANGUAGES';\nexport const SET_ALL_LANGUAGES = 'SET_ALL_LANGUAGES';\nexport const SET_ASSIGNED_USERS = 'SET_ASSIGNED_USERS';\nexport const SET_USER_BOOKS = 'SET_USER_BOOKS';\nexport const SET_USER_PROJECTS = 'SET_USER_PROJECTS';\nexport const SET_SELECTED_BOOK = 'SET_SELECTED_BOOK';\nexport const SET_TOKEN_LIST = 'SET_TOKEN_LIST';\nexport const SET_SELECTED_PROJECT = 'SET_SELECTED_PROJECT';\nexport const SET_SELECTED_TOKEN = 'SET_SELECTED_TOKEN';\nexport const SET_CONCORDANCE = 'SET_CONCORDANCE';\nexport const SET_REFERENCE_NUMBER = 'SET_REFERENCE_NUMBER';\nexport const CLEAR_STATE = 'CLEAR_STATE';\nexport const SET_TRANSLATED_WORD = 'SET_TRANSLATED_WORD';\nexport const SET_SOURCE_BOOKS = 'SET_SOURCE_BOOKS';\nexport const SET_UPLOAD_ERROR_BOOKS = 'SET_UPLOAD_ERROR_BOOKS';\nexport const COMPLETED_UPLOAD = 'COMPLETED_UPLOAD';","import React, { Component } from 'react';\nimport jwt_decode from 'jwt-decode';\nimport { Menu, MenuItem } from '@material-ui/core';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux';\nimport { setAccessToken, clearState } from '../store/actions/authActions';\n\n// let decoded;\n// let tokenAliveFlag = false\n// var accessToken = localStorage.getItem('accessToken')\n// if (accessToken) {\n//     decoded = jwt_decode(accessToken)\n//     let currentDate = new Date().getTime()\n//     let expiry = decoded.exp * 1000\n//     var firstName = decoded.firstName\n//     var hours = (expiry - currentDate) / 36e5\n//     if (hours > 0) {\n//         tokenAliveFlag = true\n//     } else {\n//         console.log(\"logged out\")\n//     }\n// }\n\n\n// const SignedInLinks = ({ classes }) => {\nclass SignedInLinks extends Component {\n    state = {\n        anchorEl: null\n    }\n\n    logOut = () => {\n        this.props.dispatch(clearState())\n        // this.props.setAccessToken({accessToken: null})\n        localStorage.removeItem('accessToken')\n        window.location = \"/\"\n    }\n\n    handleMenu = (event) => {\n        // setAnchorEl(event.currentTarget)\n        this.setState({ anchorEl: event.currentTarget })\n    }\n\n    handleClose = () => {\n        // setAnchorEl(null)\n        this.setState({ anchorEl: null })\n    }\n\n    getMenuItems() {\n        const { anchorEl } = this.state\n        return (\n            <Menu\n                anchorEl={anchorEl}\n                open={Boolean(anchorEl)}\n                onClose={this.handleClose}\n            >\n                <MenuItem>\n                    <Link to=\"/\" onClick={this.logOut} className={this.props.classes.link}>Log Out</Link>\n                </MenuItem>\n            </Menu>\n        )\n    }\n    render() {\n        const { classes } = this.props\n        const { anchorEl } = this.state\n        const isMenuOpen = Boolean(anchorEl)\n        let tokenAliveFlag = false\n        let decoded;\n        const { accessToken } = this.props\n        if (accessToken) {\n            decoded = jwt_decode(accessToken)\n            let currentDate = new Date().getTime()\n            let expiry = decoded.exp * 1000\n            var firstName = decoded.firstName\n            var hours = (expiry - currentDate) / 36e5\n            if (hours > 0) {\n                tokenAliveFlag = true\n            } else {\n                console.log(\"logged out\")\n            }\n        }\n        console.log('Header', this.props)\n        const { current_user } = this.props;\n        return (\n\n            <div>\n                {\n                    current_user.firstName ?  (\n                        <div>\n                            <label color=\"inherit\" style={{ padding: '5px', color: 'white' }}>Welcome, {current_user.firstName.charAt(0).toUpperCase() + current_user.firstName.slice(1)}</label>\n                        <IconButton\n                            aria-owns={isMenuOpen ? 'material-appbar' : undefined}\n                            aria-haspopup=\"true\"\n                            onClick={this.handleMenu}\n                            className={classes.link}\n                            // color=\"inherit\"\n                        >\n                            <AccountCircle />\n                        </IconButton>\n                        {this.getMenuItems()}\n                    </div>\n                    ) \n                    : (\n                    <div style={{paddingTop: '20px', paddingRight: '10px'}}>\n                    <Link to=\"/signin\" className={classes.link}>Sign In</Link>\n                    <Link to=\"/signup\" className={classes.link}>Sign Up</Link>\n                    </div>)\n                }\n                \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    current_user: state.auth.current_user\n})\n\n// const mapDispatchToProps = dispatch => {\n//     return {\n//         setAccessToken: (accessToken) => dispatch(setAccessToken(accessToken))\n//     }\n// }\n\nconst mapDispatchToProps = dispatch => ({\n    dispatch\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignedInLinks);","import React, { Fragment } from 'react';\nimport { AppBar, Typography, Toolbar, Grid } from '@material-ui/core';\nimport SignedInLinks from './SignedInLinks';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom'\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        backgroundColor: 'black',\n        color: 'white',\n        zIndex: 9\n    },\n    link: {\n        margin: theme.spacing(),\n        textDecoration: 'none',\n        color: 'white'\n    },\n    h1: {\n        backgroundColor: 'black',\n    },\n    grow: {\n        flexGrow: 1,\n    },\n});\n\nfunction Header({ classes }) {\n    return (\n        \n        <Fragment>\n            {/* <Grid item xs={12} style={{position: 'fixed', width: '100%'}} className={classes.root}> */}\n            <Grid container style={{position: 'fixed', width: '100%'}} className={classes.root} >\n            <Grid item xs={3} style={{paddingLeft: '10px'}}>\n                <Link to=\"/\" className={classes.link}>\n                    <Typography variant=\"h5\" className={classes.grow}>\n                        AutographaMT\n                    </Typography>\n                </Link>\n            </Grid>\n            <Grid item xs={9} style={{textAlign: 'right'}}>\n                <SignedInLinks classes={classes} />\n            </Grid>\n        </Grid>\n        </Fragment>\n        // <AppBar className={classes.h1}>\n        //     <Toolbar>\n        //         {/* <Link color=\"inherit\" variant=\"body2\" href=\"/\"> */}\n        //         <Link to=\"/\" className={classes.link}>\n        //             <Typography variant=\"h5\" className={classes.grow}>\n        //                 AutographaMT\n        //             </Typography>\n        //         </Link>\n        //     <div className={classes.grow}>\n        //         </div>\n        //         <SignedInLinks classes={classes} />\n        //     </Toolbar>\n        // </AppBar>\n    )\n}\n\nexport default withStyles(styles)(Header);","import React, { Component, Fragment } from 'react'\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nimport apiUrl from '../GlobalUrl';\nimport { Divider } from '@material-ui/core';\nimport jwt_decode from 'jwt-decode';\nimport { Redirect, Route, Switch, BrowserRouter } from 'react-router-dom';\nimport { menus } from '../api/menu';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nlet decoded;\nvar role;\n// let tokenAliveFlag = false\nvar accessToken = localStorage.getItem('accessToken')\nif (accessToken) {\n    decoded = jwt_decode(accessToken)\n    role = decoded.role\n}\nvar drawerItems;\nif (role === 'sa') {\n    drawerItems = ['List Organisations', 'List Users', 'List Projects', 'Create Projects', 'Create Organisation']\n} else {\n    drawerItems = ['List Users', 'List Projects', 'Create Projects', 'Create Organisation']\n}\nconsole.log('menus', menus)\nclass DrawerPane extends Component {\n    state = {\n        expanded: 'translations'\n    }\n\n    // async getUsers(){\n    //     const {updateState, userStatus} = this.props.data\n    //     const data = await fetch(apiUrl + '/v1/autographamt/users', {\n    //         method:'GET',\n    //         headers: {\n    //             \"Authorization\": 'bearer ' + accessToken\n    //         }\n    //     })\n    //     const userData = await data.json()\n    //     userData.map(item => {\n    //         if(item.roleId > 1){\n    //             userStatus[item.userId] = {\n    //                 \"admin\":true,\n    //                 \"verified\":item.verified\n    //             }\n    //         }else{\n    //             userStatus[item.userId] = {\n    //                 \"admin\":false,\n    //                 \"verified\":item.verified\n    //             }\n    //         }\n    //     })\n    //     updateState({userData:userData, userStatus:userStatus})\n    // }\n\n    // componentDidMount(){\n    //     this.getUsers()\n    // }\n\n    async getOrganisations() {\n        const { updateState, organisationsStatus } = this.props.data\n\n        const data = await fetch(apiUrl + '/v1/autographamt/organisations', {\n            method: 'GET',\n            headers: {\n                Authorization: 'bearer ' + accessToken\n            }\n        })\n        const organisationsData = await data.json()\n        organisationsData.map(item => {\n            organisationsStatus[item.organisationId] = {\n                \"verified\": item.verified\n            }\n        })\n        updateState({\n            organisationsStatus: organisationsStatus,\n            organisationsData: organisationsData,\n            listOrganisationsPane: true,\n            listUsersPane: false,\n            createProjectsPane: false,\n            listProjectsPane: false,\n            assignmentsPane: false,\n            listUserProjectsPane: false,\n        })\n    }\n\n    handleDashboard = (text) => {\n        switch (text) {\n            case 'List Organisations': this.handleOrganisations(); break;\n            case 'Assignments': this.handleStatistics(); break;\n            case 'Create Organisation': this.createOrganisations(); break;\n            case 'List Users': this.handleUsers(); break;\n            case 'Statistics': this.handleStatistics(); break;\n            case 'Charts': this.handleCharts(); break;\n            case 'Create Projects': this.createProjects(); break;\n            case 'List Projects': return '/projects'; break;\n            case 'My Projects': this.listMyProjects(); break;\n        }\n    }\n    checkWhat = (text) => {\n        const { history } = this.props;\n        console.log(this.handleDashboard(text))\n        console.log(history.push(this.handleDashboard(text)))\n    }\n    render() {\n        const { classes, current_user } = this.props\n        const { expanded } = this.state;\n        return (\n            // <Drawer\n            //     className={classes.drawer}\n            //     variant=\"permanent\"\n            //     classes={{\n            //         paper: classes.drawerPaper,\n            //     }}\n            // >\n                // <div className={classes.toolbar} />\n                <Fragment>\n                    \n                {\n                    menus.map(menu => {\n                        if(menu.roles.includes(current_user.role)){\n                            return (\n                                <ExpansionPanel style={{ backgroundColor: '#2a2a2fbd', color: 'white', margin: 0 }} key={menu.key} expanded={expanded === menu.key} onClick={() => this.setState({expanded: expanded === menu.key ? false : menu.key})}>\n                                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon style={{ color: 'white' }}  />}>\n                                        <Typography color=\"inherit\" className={classes.heading}>{menu.name}</Typography>\n                                    </ExpansionPanelSummary>\n                                    <List>\n                                        {\n                                            menu.child &&\n                                            menu.child.map(childMenu => {\n                                                if(childMenu.roles.includes(current_user.role)) {\n                                                    return (\n                                                        <Link to={childMenu.link} key={childMenu.key}>\n                                                            <ListItem button  className={classes.exp}\n                                                            // onClick={(e) => this.checkWhat(text)}\n                                                            >\n                                                                <ListItemText disableTypography divider=\"true\"\n                                                                    primary={<Typography variant=\"caption\" style={{ color: '#FFFFFF' }}\n        \n                                                                    >{childMenu.name}</Typography>}\n                                                                />\n                                                            </ListItem>\n                                                        </Link>\n                                                    )\n                                                }\n                                                \n                                            })\n                                        }\n                                    </List>\n                                </ExpansionPanel>\n                            )\n                        }\n                        \n                    })\n                }\n                </Fragment>\n\n                \n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    current_user: state.auth.current_user\n});\n\n\nexport default connect(mapStateToProps)(DrawerPane);","const apiUrl = \"https://stagingapi.autographamt.com/\"\n\n// const apiUrl = \"http://localhost:8000/\"\n\nexport default apiUrl","export const menus = [\n    {\n        name: 'Dashboard',\n        roles: ['m', 'ad', 'sa'],\n        key:'dashboard',\n        child: [\n            {\n                name: 'List organisation',\n                link: '/app/organisations',\n                roles: ['member', 'ad', 'sa'],\n                key:'organisations'\n            },\n            {\n                name: 'List projects',\n                link: '/app/projects',\n                roles: ['member', 'ad', 'sa'],\n                key: 'projects'\n            },\n            {\n                name: 'List users',\n                link: '/app/users',\n                roles: ['member', 'ad', 'sa'],\n                key: 'users'\n            },\n            {\n                name: 'Create Organisation',\n                link: '/app/organisations/create',\n                roles: ['m', 'sa'],\n                key: 'create_organisations'\n            }\n\n        ]\n    },\n    {\n        name: 'Translations',\n        roles: ['m', 'ad', 'sa'],\n        key: 'translations',\n        child: [\n            {\n                name: 'Sources',\n                link: '/app/translations/sources',\n                roles: ['m', 'ad', 'sa'],\n                key: 'sources'\n            },\n            {\n                name: 'My projects',\n                link: '/app/translations/projects',\n                roles: ['m', 'ad', 'sa'],\n                key: 'my_projects'\n            },\n        ]\n    },\n\n]","import { SET_BIBLE_LANGUAGES, SET_IS_FETCHING, SET_ALL_LANGUAGES, SET_SOURCE_BOOKS, SET_UPLOAD_ERROR_BOOKS, COMPLETED_UPLOAD } from './actionConstants';\nimport apiUrl from '../../components/GlobalUrl.js';\nimport swal from 'sweetalert';\n\nconst accessToken = localStorage.getItem('accessToken');\n\nexport const fetchBibleLanguages = () => async dispatch => {\n    dispatch(setIsFetching(true))\n    try{\n        \n        // const data = await fetch(apiUrl + 'v1/bibles/languages', {\n        //     method: 'GET'\n        // })\n        \n        // const bibleLanguages = await data.json()\n\n        \n        const lang = await fetch(apiUrl + 'v1/bibles', {\n            method: 'GET'\n        })\n        const biblesDetails = await lang.json()\n\n        \n\n        \n        dispatch(setBibleLanguages(biblesDetails))\n    }\n    catch(e) {\n        swal({\n            title: 'Fetch Bible languages',\n            text: 'Unable to fetch bible language data, check your internet connection or contact admin',\n            icon: 'error'\n        })\n\n    }\n    dispatch(setIsFetching(false))\n}\n\nexport const fetchAllLanguages = () => async dispatch => {\n    try{\n        const data = await fetch(apiUrl + 'v1/languages', {\n            method: 'GET'\n        })\n        const allLanguages = await data.json()\n        dispatch(setAllLanguages(allLanguages))\n    }\n    catch(e){\n        swal({\n            title: 'Fetch all languages',\n            text: 'Unable to fetch all language data, check your internet connection or contact admin',\n            icon: 'error'\n        })\n\n    }\n}\n\nexport const fetchSourceBooks = (sourceId) => async dispatch => {\n    dispatch(setIsFetching(true))\n    try {\n        // const { sourceId } = this.state\n        console.log(sourceId)\n        const data = await fetch(apiUrl + 'v1/sources/books/' + sourceId, {\n            method: 'GET',\n            headers: {\n                Authorization: 'bearer ' + accessToken\n            }\n        })\n        const response = await data.json()\n        console.log(response)\n        if (\"success\" in response) {\n            swal({\n                title: 'Fetch books',\n                text: response.message,\n                icon: 'error'\n            })\n\n            // this.props.displaySnackBar({\n            //     snackBarMessage: response.message,\n            //     snackBarOpen: true,\n            //     snackBarVariant: \"error\"\n            // })\n        } else {\n\n            // this.setState({\n            //     listBooks: true,\n            //     availableBooksData: response,\n            // })\n            dispatch(setSourceBooks(response))\n        }\n    }\n    catch (ex) {\n        \n        swal({\n            title: 'Fetch books',\n            text: 'Unable to fetch books data, check your internet connection or contact admin',\n            icon: 'error'\n        })\n\n    }\n    dispatch(setIsFetching(false))\n}\n\nexport const  createSource = (apiData, close) => async dispatch => {\n    dispatch(setIsFetching(true))\n    try {\n        const postVersions = await fetch(apiUrl + 'v1/sources/bibles', {\n            method: 'POST',\n            body: JSON.stringify(apiData)\n        })\n        const myJson = await postVersions.json()\n        close('createSourceDialog')\n        // this.props.displaySnackBar({\n        //     snackBarMessage: \n        //     snackBarOpen: true,\n        //     snackBarVariant: \n        // })\n        \n        swal({\n            title: 'Create Source',\n            text: myJson.message,\n            icon: (myJson.success) ? \"success\" : \"error\"\n        })\n        if(myJson.success){\n            dispatch(fetchBibleLanguages())\n        }\n    }\n    catch (ex) {\n        swal({\n            title: 'Create Source',\n            text: 'Unable to create source, check your internet connection or contact admin',\n            icon: 'error'\n        })\n        // this.props.displaySnackBar({\n        //     snackBarMessage: \"Upload Process Failed\",\n        //     snackBarOpen: true,\n        //     snackBarVariant: \"error\"\n        // })\n    }\n    dispatch(setIsFetching(false))\n}\n\nexport const uploadBibleTexts = (apiData, book) => async dispatch => {\n    dispatch(setIsFetching(true))\n    try {\n        const postVersions = await fetch(apiUrl + 'v1/bibles/upload', {\n            method: 'POST',\n            body: JSON.stringify(apiData)\n        })\n        const myJson = await postVersions.json()\n        // this.setState({ message: myJson.message })\n        // if (myJson.success) {\n        //     return true\n        // } else {\n        //     return false\n\n        // }\n        \n        if (!myJson.success) {\n            dispatch(setUploadError(book))\n        }\n        // this.props.displaySnackBar({\n        //     snackBarMessage: myJson.message,\n        //     snackBarOpen: true,\n        //     snackBarVariant: (myJson.success) ? \"success\" : \"error\"\n        // })\n    }\n    catch (ex) {\n        swal({\n            title: 'Upload Bible',\n            text: 'Unable to upload bible, check your internet connection or contact admin',\n            icon: 'error'\n        })\n        // this.setState({ variant: \"error\", snackBarOpen: true, message: \"Upload Process Failed\", snackColor: '#d32f2f' })\n        // this.props.displaySnackBar({\n        //     snackBarMessage: \"Upload Process Failed\",\n        //     snackBarOpen: true,\n        //     snackBarVariant: \"error\"\n        // })\n    }\n    dispatch(setCompletedUpload(true))\n    dispatch(setIsFetching(false))\n}\n\nexport const setUploadError = book => ({\n    type: SET_UPLOAD_ERROR_BOOKS,\n    book\n});\n\nexport const setCompletedUpload = (status) => ({\n    type: COMPLETED_UPLOAD,\n    status\n})\n\nexport const setSourceBooks = books => ({\n    type: SET_SOURCE_BOOKS,\n    books\n})\n\nexport const setBibleLanguages = bibleLanguages => ({\n    type: SET_BIBLE_LANGUAGES,\n    bibleLanguages\n});\n\nexport const setAllLanguages = allLanguages => ({\n    type: SET_ALL_LANGUAGES,\n    allLanguages\n})\n\nexport const setIsFetching = status => ({\n    type: SET_IS_FETCHING,\n    status\n})\n\n// export const createSource = (source) => {\n//     return (dispatch, getState) => {\n//         dispatch({ type: 'GET_SOURCES', source })\n//     }\n// };\n\nexport const selectProject = (project) => {\n    return (dispatch, getState) => {\n        dispatch({ type: 'SELECT_PROJECT', project })\n    }\n}\n\nexport const selectedBooks = (selection) => {\n    return (dispatch, getState) => {\n        dispatch({ type: 'SELECTED_BOOKS', selection })\n    }\n}\n\nexport const selectToken = (token) => {\n    return (dispatch, getState) => {\n        dispatch({ type: 'SELECT_TOKEN', token })\n    }\n}\n\nexport const selectBook = (project) => {\n    return (dispatch, getState) => {\n        dispatch({type:\"SELECT_BOOK\", project})\n    }\n}\n\nexport const saveToken = (token) => {\n    return (dispatch, getState) => {\n        dispatch({ type: 'GET_TOKEN', token })\n    }\n}\n\nexport const displaySnackBar = (popUp) => {\n    return (dispatch, getState) => {\n        dispatch({ type: 'DISPLAY_POP_UP', popUp})\n    }\n}\n\nexport const saveReference = (reference) => {\n    return (dispatch, getState) => {\n        dispatch({type: 'SAVE_REFERENCE', reference})\n    }\n}","import React, { Component } from 'react'\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport { connect } from 'react-redux'\nimport { displaySnackBar } from '../store/actions/sourceActions'\n\nclass PopUpMessages extends Component {\n\n    snackBarHandleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        // this.setState({ snackBarOpen: false }, () => this.props.data.updatePopUpState({popup:false}));\n        // this.setState({snackBarOpen:false}, () => this.props.data.closeSnackBar({snackBarOpen: false}))\n        this.props.displaySnackBar({\n            snackBarOpen: false,\n            snackBarMessage: null,\n            snackBarVariant: null\n        })\n    };\n    render() {\n        const { snackBarVariant, snackBarOpen, snackBarMessage} = this.props\n        let snackColor;\n        if(snackBarVariant === \"success\"){\n            snackColor = '#43a047'\n        }else{\n            snackColor = '#d32f2f'\n        }\n        return (\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                open={snackBarOpen}\n                autoHideDuration={4000}\n                onClose={this.snackBarHandleClose}\n            >\n                <SnackbarContent\n                    style={{ backgroundColor: snackColor }}\n                    onClose={this.snackBarHandleClose}\n                    // variant={variant}\n                    message={snackBarMessage}\n                />\n            </Snackbar>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        snackBarOpen: state.sources.snackBarOpen,\n        snackBarMessage: state.sources.snackBarMessage,\n        snackBarVariant: state.sources.snackBarVariant\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        displaySnackBar: (popUp) => dispatch(displaySnackBar(popUp))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PopUpMessages)","import React, { Component, Fragment } from 'react';\nimport { Typography, Divider } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: '#f1f1f1',\n        // backgroundColor: '#ededf4',\n        // color: 'white',\n        padding: '6px 0px',\n        fontSize: '18px'\n      },\n});\n\nclass ComponentHeading extends Component {\n    render() {\n        const { classes  } =  this.props\n        var { color, styleColor, text } = this.props.data\n        if(!color){\n            color  = \"white\"\n        }\n        if(!styleColor){\n            styleColor = null\n        }\n        return (\n            <Fragment>\n            <Typography  align=\"center\" className={classes.root}>\n                {text}\n            </Typography>\n            <Divider />\n            </Fragment>\n        )\n    }\n}\n\n\nexport default withStyles(styles)(ComponentHeading);","import {\n    SET_PROJECTS,\n    SET_IS_FETCHING,\n    SET_USER_PROJECTS,\n    SET_SELECTED_BOOK,\n    SET_TOKEN_LIST,\n    SET_SELECTED_PROJECT,\n    SET_SELECTED_TOKEN,\n    SET_CONCORDANCE,\n    SET_REFERENCE_NUMBER,\n    SET_TRANSLATED_WORD\n} from './actionConstants';\nimport apiUrl from '../../components/GlobalUrl.js';\nimport swal from 'sweetalert';\n// import { setDisplayName } from 'recompose';\nvar FileSaver = require('file-saver');\n\nconst accessToken = localStorage.getItem('accessToken');\n\nexport const fetchProjects = () => async (dispatch) => {\n    dispatch(setIsFetching(true));\n    try {\n        const data = await fetch(apiUrl + 'v1/autographamt/projects', {\n            method: 'GET',\n            headers: {\n                \"Authorization\": 'bearer ' + accessToken\n            }\n        });\n        const projectLists = await data.json();\n        if (!('message' in projectLists)) {\n            dispatch(setProjects(projectLists));\n        }\n\n    }\n    catch (e) {\n        swal({\n            title: 'Projects',\n            text: 'Unable to fetch projects, check your internet connection or contact admin',\n            icon: 'error'\n        });\n\n    }\n    dispatch(setIsFetching(false));\n}\n\nexport const createProject = (apiData, close, clearState) => async dispatch => {\n    dispatch(setIsFetching(true))\n    try {\n        const data = await fetch(apiUrl + '/v1/autographamt/organisations/projects', {\n            method: 'POST',\n            body: JSON.stringify(apiData),\n            headers: {\n                Authorization: 'bearer ' + accessToken\n            }\n        })\n        const myJson = await data.json();\n        if (myJson.success) {\n            clearState()\n            dispatch(fetchProjects());\n            swal({\n                title: 'Projects',\n                text: 'Project created successfully',\n                icon: 'success'\n            }).then(msg => {\n                close()\n            })\n            dispatch(setIsFetching(false));\n        } else {\n            swal({\n                title: 'Projects',\n                text: 'Unable to create projects, contact admin or try again later',\n                icon: 'error'\n            });\n            dispatch(setIsFetching(false));\n\n        }\n    }\n    catch (e) {\n        swal({\n            title: 'Projects',\n            text: 'Unable to create projects, check your internet connection or contact admin',\n            icon: 'error'\n        });\n        dispatch(setIsFetching(false));\n    }\n}\n\nexport const fetchUserProjects = () => async dispatch => {\n    try {\n        dispatch(setIsFetching(true))\n        const data = await fetch(apiUrl + 'v1/autographamt/users/projects', {\n            method: 'GET',\n            headers: {\n                Authorization: 'bearer ' + accessToken\n            }\n        })\n        const response = await data.json()\n        if ('success' in response) {\n            swal({\n                title: 'Fetch users projects',\n                text: response.message,\n                icon: 'error'\n            });\n        } else {\n            // this.setState({ projects: response })\n            dispatch(setUserProjects(response))\n        }\n        dispatch(setIsFetching(false))\n    }\n    catch (ex) {\n        dispatch(setIsFetching(false))\n        swal({\n            title: 'Fetch users projects',\n            text: 'Unable to fetch users projects, check your internet connection or contact admin',\n            icon: 'error'\n        });\n    }\n}\n\nexport const fetchTokenList = (currentBook, sourceId) => async dispatch => {\n    dispatch(setIsFetching(true))\n    var bookData = await fetch(apiUrl + 'v1/tokenlist/' + sourceId + '/' + currentBook, {\n        method: 'GET'\n    })\n    const tokenList = await bookData.json();\n    dispatch(setTokenList(tokenList))\n    dispatch(setIsFetching(false))\n    // this.setState({ tokenList: tokenList })\n}\n\nexport const fetchConcordances = (token, sourceId, book) => async dispatch => {\n    if (book) {\n        dispatch(setIsFetching(true))\n        try {\n            const data = await fetch(apiUrl + '/v1/concordances/' + sourceId + '/' + book + '/' + token, {\n                method: 'GET'\n            })\n            const concordance = await data.json()\n            dispatch(setConcordance(concordance))\n            dispatch(setIsFetching(false))\n        }\n        catch (e) {\n            dispatch(setIsFetching(false))\n        }\n        // await this.setState({ concordance: concordance })\n    }\n}\n\nexport const getTranslatedText = (projectId, bookList, projectName) => async dispatch => {\n    const apiData = {\n        projectId,\n        bookList\n    }\n    dispatch(setIsFetching(true))\n    try {\n        const data = await fetch(apiUrl + 'v1/downloaddraft', {\n            method: 'POST',\n            body: JSON.stringify(apiData),\n            headers: {\n                Authorization: 'bearer ' + accessToken\n            }\n        })\n        const myJson = await data.json()\n        if (\"translatedUsfmText\" in myJson) {\n            const usfmTexts = myJson.translatedUsfmText\n            Object.keys(usfmTexts).map(book => {\n                let blob = new Blob([usfmTexts[book]], { type: \"text/plain;charset=utf-8\" });\n                FileSaver.saveAs(blob, book + \"_\" + projectName.split(\"|\")[0] + \"_.usfm\");\n            })\n        } else {\n\n            swal({\n                title: 'Download drafts',\n                text: 'Unable to download drafts: ' + myJson.message,\n                icon: 'error'\n            });\n        }\n    }\n    catch (ex) {\n        swal({\n            title: 'Fetch users projects',\n            text: 'Unable to fetch users projects, check your internet connection or contact admin',\n            icon: 'error'\n        });\n    }\n    dispatch(setIsFetching(false))\n}\nexport const updateTransaltion = (apiData, clear) => async (dispatch, getState) => {\n    dispatch(setIsFetching(true));\n    try {\n        const update = await fetch(apiUrl + 'v1/autographamt/projects/translations', {\n            method: 'POST',\n            body: JSON.stringify(apiData),\n            headers: {\n                Authorization: 'bearer ' + accessToken\n            }\n        })\n        const myJson = await update.json()\n        if (myJson.success) {\n            clear()\n            dispatch(getTranslatedWords(getState().project.selectedToken, getState().project.selectedProject.sourceId, getState().project.selectedProject.targetId))\n            swal({\n                title: 'Token translation',\n                text: myJson.message,\n                icon: 'success'\n            });\n        } else {\n            swal({\n                title: 'Token translation',\n                text: myJson.message,\n                icon: 'error'\n            });\n        }\n    }\n    catch (ex) {\n        swal({\n            title: 'Token translation',\n            text: 'Token translation failed, check your internet connection or contact admin',\n            icon: 'error'\n        });\n    }\n    dispatch(setIsFetching(false));\n}\n\nexport const getTranslatedWords = (token, sourceId, targetLanguageId) => async dispatch => {\n    dispatch(setIsFetching(true))\n    try{\n        const data = await fetch(apiUrl + '/v1/translations/' + sourceId + '/' + targetLanguageId + '/' + token, {\n            method: 'GET'\n        })\n        const translatedWords = await data.json()\n        if (\"translation\" in translatedWords) {\n            const { translation, senses } = translatedWords\n            dispatch(setTranslatedWord(translatedWords))\n        } else {\n            dispatch(setTranslatedWord({\n                translation: '',\n                senses: []\n            }))\n        }\n    }\n    catch(e){\n        swal({\n            title: 'Translation fetch error',\n            text: 'Failed to fetch token translation, check your internet connection or contact admin',\n            icon: 'error'\n        });\n    }\n    dispatch(setIsFetching(false))\n}\n\nexport const setTranslatedWord = translation => ({\n    type: SET_TRANSLATED_WORD,\n    translation\n});\n\nexport const setSelectedProject = project => ({\n    type: SET_SELECTED_PROJECT,\n    project\n})\n\nexport const setUserProjects = projects => ({\n    type: SET_USER_PROJECTS,\n    projects\n})\n\nexport const setProjects = (projects) => ({\n    type: SET_PROJECTS,\n    projects\n});\n\nexport const setIsFetching = (status) => ({\n    type: SET_IS_FETCHING,\n    status\n});\n\nexport const setTokenList = tokens => ({\n    type: SET_TOKEN_LIST,\n    tokens\n})\n\nexport const setSelectedBook = book => ({\n    type: SET_SELECTED_BOOK,\n    book\n});\n\nexport const setSelectedToken = token => ({\n    type: SET_SELECTED_TOKEN,\n    token\n});\n\nexport const setConcordance = concordance => ({\n    type: SET_CONCORDANCE,\n    concordance\n})\n\nexport const setReference = reference => ({\n    type: SET_REFERENCE_NUMBER,\n    reference\n});","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/styles';\nimport './loader.css';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n       \n    }\n});\n\nclass CircleLoader extends Component {\n    render() {\n        const { classes } = this.props;\n        return (\n            <div className=\"loading\">Loading</div>\n        )\n    }\n}\n\nexport default withStyles(styles)(CircleLoader);","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { booksDialog } from '../store/actions/dialogActions';\nimport { displaySnackBar, selectProject } from '../store/actions/sourceActions';\nimport ComponentHeading from './ComponentHeading';\nimport apiUrl from './GlobalUrl';\nimport PopUpMessages from './PopUpMessages';\nimport { getTranslatedText } from '../store/actions/projectActions';\nimport CircleLoader from './loaders/CircleLoader';\nvar FileSaver = require('file-saver');\n\nvar accessToken = localStorage.getItem('accessToken')\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        padding: theme.spacing(2)\n    },\n});\n\nclass BooksDownloadable extends Component {\n    state = {\n        value: true,\n        targetBooks: [],\n        targetBooksChecked: {}\n    }\n\n\n    // componentWillReceiveProps(nextProps){\n    //     const { project } = nextProps\n    //     // const { project } =  this.props\n    //     if(project){\n    //         let targetBooks = project.books\n    //         let targetBooksChecked = {}\n    //         targetBooks.map(book => targetBooksChecked[book] = {\"checked\": false})\n    //         this.setState({ targetBooks, targetBooksChecked})\n    //     }\n    // }\n\n    // componentDidUpdate(prevProps) {\n    //     const { selectedProject } = this.props;\n    //     if(prevProps.selectedProject !== selectedProject){\n\n    //     }\n    // }\n\n    // async getTranslatedText(projectId, bookList) {\n    // const { selectedProject } =  this.props\n    // const { targetBooksChecked, targetBooks } = this.state\n    // var bookList = []\n    // targetBooks.map(book => {\n    //     if (targetBooksChecked[book]['checked']) {\n    //         bookList.push(book)\n    //     }\n    // })\n    //     const apiData = {\n    //         projectId,\n    //         bookList\n    //     }\n    //     try {\n    //         const data = await fetch(apiUrl + 'v1/downloaddraft', {\n    //             method: 'POST',\n    //             body: JSON.stringify(apiData),\n    //             headers: {\n    //                 Authorization: 'bearer ' + accessToken\n    //             }\n    //         })\n    //         const myJson = await data.json()\n    //         if(\"translatedUsfmText\" in myJson){\n    //             const usfmTexts = myJson.translatedUsfmText\n    //             Object.keys(usfmTexts).map(book => {\n    //                 let blob = new Blob([usfmTexts[book]], { type: \"text/plain;charset=utf-8\" });\n    //                 FileSaver.saveAs(blob, book + \"_\" + project.projectName.split(\"|\")[0] + \"_.usfm\");\n    //             })\n    //         }\n    //     }\n    //     catch (ex) {\n    //         this.props.displaySnackBar({\n    //             snackBarMessage: \"server Error\",\n    //             snackBarOpen: true,\n    //             snackBarVariant: \"error\"\n    //         })\n    //         // this.setState({ variant: \"error\", message: \"server Error\", snackBarOpen: true })\n    //     }\n    // }\n\n\n    handleChange = (book) => {\n        var { targetBooks } = this.state\n        // const temp = targetBooksChecked.book\n        const isChecked = targetBooks.includes(book);\n        if (isChecked) {\n            targetBooks = targetBooks.filter(item => item !== book)\n        } else {\n            targetBooks.push(book)\n        }\n        // targetBooksChecked[book]['checked'] = !targetBooksChecked[book]['checked']\n        this.setState({ targetBooks })\n    }\n\n    getBooksCheckbox = () => {\n        const { targetBooks, targetBooksChecked } = this.state\n        const { project } = this.props\n        if (project.books) {\n            return project.books.map((book, index) => {\n                return (\n                    <FormControlLabel key={book}\n                        control={\n                            <Checkbox\n                                checked={targetBooks.includes(book)}\n                                onChange={() => this.handleChange(book)}\n                                value={targetBooks.includes(book)}\n                            />\n                        }\n                        label={book}\n                    />\n                )\n            })\n        }\n    }\n    handleDownload = () => {\n        const { project, dispatch } = this.props;\n        const { targetBooks } = this.state;\n        if (project.projectId) {\n            dispatch(getTranslatedText(project.projectId, targetBooks, project.projectName))\n        }\n    }\n\n    handleClose = () => {\n        const { updateState } = this.props;\n        this.setState({\n            targetBooks: [],\n            targetBooksChecked: {}\n        })\n        updateState({booksPane: false})\n    }\n\n    render() {\n        const { updateState, booksPane, classes, project, isFetching } = this.props\n        return (\n            <Dialog\n                open={booksPane}\n                onClose={this.handleClose}\n            // value={this.state.value}\n            >\n                {/* <PopUpMessages /> */}\n                {\n                    isFetching &&\n                    <CircleLoader />\n                }\n                <ComponentHeading data={{ classes: classes, text: \"Select Books to Download\", styleColor: '#2a2a2fbd' }} />\n                {/* <DialogTitle id=\"form-dialog-title\">Select Books to Download</DialogTitle> */}\n                <DialogContent>\n                    {this.getBooksCheckbox()}\n\n                </DialogContent>\n                <DialogActions>\n                    {/* <Button onClick={this.handleClose} variant=\"raised\" color=\"primary\">Close</Button> */}\n                    <Button onClick={this.handleClose} size=\"small\" variant=\"contained\" color=\"secondary\" >Close</Button>\n                    <Button onClick={this.handleDownload} variant=\"contained\" color=\"primary\" >Download</Button>\n                </DialogActions>\n            </Dialog>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => ({\n    selectedProject: state.project.selectedProject\n})\n\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(BooksDownloadable));","\n// import { connect } from 'react-redux';\nimport React, { Component } from 'react'\nimport { Grid } from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Header from './Header';\nimport PopUpMessages from './PopUpMessages';\nimport apiUrl from './GlobalUrl';\nimport { connect } from 'react-redux'\nimport { displaySnackBar, selectProject } from '../store/actions/sourceActions';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Card } from '@material-ui/core';\nimport { CardHeader } from '@material-ui/core';\nimport { Typography, CardContent } from '@material-ui/core';\nimport { booksDialog } from '../store/actions/dialogActions';\nimport BooksDownloadable from './BooksDownloadable';\n// var FileSaver = require('file-saver');\n\nvar accessToken = localStorage.getItem('accessToken')\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        padding: theme.spacing(2)\n    },\n    cursorPointer: {\n      cursor: 'pointer',\n    },\n});\n\nclass DownloadDraft extends Component {\n    state = {\n        projects: null,\n        translatedTokenInfo: [],\n        booksDialogOpen: false, \n        selectedProject: {}\n    }\n\n    async getTranslatedTokenInfo() {\n        try {\n            const data = await fetch(apiUrl + 'v1/info/translatedtokens', {\n                method: 'GET',\n                headers: {\n                    Authorization: 'bearer ' + accessToken\n                }\n            })\n            const translatedTokenInfo = await data.json()\n            // const response = await data.json()\n            if ('success' in translatedTokenInfo) {\n                this.props.displaySnackBar({\n                    snackBarMessage: translatedTokenInfo.message,\n                    snackBarOpen: true,\n                    snackBarVariant: \"error\"\n                })\n            } else {\n\n                this.setState({ translatedTokenInfo })\n            }\n        }\n        catch (ex) {\n            this.props.displaySnackBar({\n                snackBarMessage: \"Server Error\",\n                snackBarOpen: true,\n                snackBarVariant: \"error\"\n            })\n\n        }\n    }\n\n    async getVersionData() {\n        const data = await fetch(apiUrl + 'v1/versiondetails', {\n            method: 'GET'\n        })\n        const versionDetails = await data.json()\n        this.setState({ versionDetails })\n    }\n\n\n    async getLanguagesData() {\n        // const data = await fetch('http://localhost:8000/v1/languages', {\n        //     method: 'GET'\n        // })\n        const lang = await fetch(apiUrl + 'v1/languages', {\n            method: 'GET'\n        })\n        const languageDetails = await lang.json()\n        // const languages = await lang.json()\n        this.setState({ languageDetails })\n    }\n\n    async getProjectData() {\n        try {\n            const data = await fetch(apiUrl + 'v1/autographamt/users/projects', {\n                method: 'GET',\n                headers: {\n                    Authorization: 'bearer ' + accessToken\n                }\n            })\n            const response = await data.json()\n            if ('success' in response) {\n                this.props.displaySnackBar({\n                    snackBarMessage: response.message,\n                    snackBarOpen: true,\n                    snackBarVariant: \"error\"\n                })\n            } else {\n                this.setState({ projects: response })\n            }\n        }\n        catch (ex) {\n            this.props.displaySnackBar({\n                snackBarMessage: \"Server Error\",\n                snackBarOpen: true,\n                snackBarVariant: \"error\"\n            })\n\n        }\n    }\n\n    componentDidMount() {\n        this.getProjectData()\n        // this.getVersionData()\n        this.getTranslatedTokenInfo()\n        // this.getLanguagesData()\n    }\n\n    handleClick = e => {\n        e.preventDefault();\n        this.getTranslatedText()\n    }\n\n    selectBooks = () => {\n        this.setState({ open: true })\n    }\n\n    handleClose = () => {\n        this.setState({ open: false })\n    }\n\n\n\n    displayLanguage = () => {\n        const languages = Object.keys(this.state.translatedTokenInfo)\n        return languages.map(lang => {\n            return (\n                <MenuItem key={lang} value={lang}>{lang.charAt(0).toUpperCase() + lang.slice(1)}</MenuItem>\n            )\n        })\n    }\n\n    displayVersions(language) {\n        if (!language) {\n            return <MenuItem key=\"\" value=\"\" disabled>Loading Versions</MenuItem>\n        }\n        const versions = Object.keys(this.state.translatedTokenInfo[this.state.language])\n        return versions.map(item => {\n            return <MenuItem key={item} value={item}>{item.toUpperCase()}</MenuItem>\n        })\n    }\n\n    displayTargetLanguages() {\n        if (!this.state.version) {\n            return <MenuItem key=\"\" value=\"\" disabled>Loading Target</MenuItem>\n        }\n        const targetLanguages = this.state.translatedTokenInfo[this.state.language][this.state.version]\n        return targetLanguages.map(lang => {\n            return (\n                <MenuItem key=\"lang\" value={lang}>{lang.charAt(0).toUpperCase() + lang.slice(1)}</MenuItem>\n            )\n        })\n    }\n\n    async getTargetBooks(targetLanguageId) {\n        const version = this.state.versionDetails.filter((ver) => {\n            return ver.languageName === this.state.language && ver.versionContentCode === this.state.version && ver.contentType === 'bible'\n        })\n        const sourceId = version[0].sourceId\n        var book = await fetch(apiUrl + 'v1/translatedbooks/' + sourceId + '/' + targetLanguageId, {\n            method: 'GET'\n        })\n        this.setState({ targetLanguageId })\n        const targetBooks = await book.json();\n        const targetBooksChecked = this.state.targetBooksChecked\n        targetBooks.forEach(item => targetBooksChecked[item] = { checked: false })\n        this.setState({ targetBooks, targetBooksChecked, sourceId })\n    }\n\n    onTargetLanguageSelection = () => {\n        const { targetLanguage, languageDetails } = this.state\n        const selectedLanguage = languageDetails.find((item) => {\n            return item.languageName === targetLanguage\n        })\n        const targetLanguageId = selectedLanguage.languageId\n        // this.setState({targetLanguageId})\n        this.getTargetBooks(targetLanguageId)\n        // this.props.data.updateState({targetLanguage: value})\n        // this.props.data.updateState({targetLanguageId: selectedLanguage.languageId})\n        // ({ languagename: value, languageid: value[0].languageId })\n    }\n\n    async setChecked(targetBooksChecked) {\n        this.setState({ targetBooksChecked })\n    }\n\n\n    handleCardClick = (project) => {\n        this.props.selectProject({project: project})\n        this.props.booksDialog({booksPane: true})\n    }\n\n\n    displayDraftCards(){\n        const { projects } = this.state\n        const { classes } = this.props\n        if(projects){\n            return projects.map(project => {\n                return (\n                    <Grid item xs={12} sm={6} md={3} key={project.projectId} style={{gridRowGap:'2px'}}>\n                        {/* <div className={classes.toolbar} /> */}\n                        <Card onClick={() => this.handleCardClick(project)} className={classes.cursorPointer}>\n                            <CardHeader\n                                // title={`Organisation: ${project.organisationName}`}\n                                subheader={`Organisation: ${project.organisationName}`} />\n                            <CardContent>\n                                <Typography varian=\"h5\" gutterBottom>\n                                    {project.projectName.split(\"|\")[0]}\n                                </Typography>\n                                <Typography varian=\"h5\" gutterBottom>\n                                    {project.version.name}\n                                </Typography>\n                                <Typography varian=\"h5\" gutterBottom>\n                                    {project.projectName.split(\"|\")[1]}\n                                </Typography>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                )\n            })\n\n        }else{\n            return <Typography variant=\"h5\">No Project available for download</Typography>\n        }\n    }\n\n    render() {\n        return (\n\n            <Grid item xs={12} container>\n            {/* <Header /> */}\n            <BooksDownloadable />\n                <Grid \n                    container\n                    spacing={1}\n                    style={{border:'1px solid #eee', padding:'10px', margin: '5px'}}\n                    >\n                        {this.displayDraftCards()}\n            <PopUpMessages />\n                </Grid>\n            </Grid>\n            // <Grid container item xs={12}>\n        )\n    }\n}\n\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        displaySnackBar: (popUp) => dispatch(displaySnackBar(popUp)),\n        selectProject: (project) => dispatch(selectProject(project)),\n        booksDialog: (status) => dispatch(booksDialog(status))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(withStyles(styles)(DownloadDraft));","export const uploadDialog = (status) => {\n    return (dispatch, getState) => {\n        dispatch({ type: 'TOGGLE_UPLOAD_PANE', status })\n    }\n}\n\nexport const booksDialog = (status) => {\n    return (dispatch, getState) => {\n        dispatch({ type: 'TOGGLE_BOOKS_CHECKBOX', status})\n    }\n}","import React, { Component } from 'react'\nimport {\n    Grid,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle\n} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport PopUpMessages from './PopUpMessages';\nimport ComponentHeading from './ComponentHeading';\nimport apiUrl from './GlobalUrl'\nimport { displaySnackBar, uploadBibleTexts, setCompletedUpload, setUploadError } from '../store/actions/sourceActions';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport swal from 'sweetalert';\nimport CircleLoader from './loaders/CircleLoader';\n// import { displaySnackBar } from '../store/actions/sourceActions'\nvar grammar = require('usfm-grammar')\n\n\nconst styles = theme => ({\n    progress: {\n        margin: theme.spacing(2)\n    },\n});\n\n\nclass UploadTexts extends Component {\n    state = {\n        fileContent: [],\n        parsedUsfm: [],\n        disableUpload: true,\n        progress: false,\n        text: \"\"\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.completedUpload !== this.props.completedUpload) {\n            const { completedUpload, uploadErrorBooks, dispatch } = this.props;\n            if (completedUpload) {\n                if (uploadErrorBooks.length > 0) {\n                    swal({\n                        title: 'Upload Bible',\n                        text: `${uploadErrorBooks.length} books failed to upload`,\n                        icon: 'warning'\n                    }).then(msg => {\n                        dispatch(setUploadError([]))\n                        this.props.close()\n                    })\n                } else {\n                    swal({\n                        title: 'Upload Bible',\n                        text: `All books uploaded successfully`,\n                        icon: 'success'\n                    }).then(msg => {\n                        dispatch(setUploadError([]))\n                        this.props.close()\n                    })\n                }\n            }\n        }\n\n    }\n\n    uploadFiles() {\n        const { parsedUsfm, fileContent } = this.state\n        const { sourceId, dispatch } = this.props\n        // let errorFiles = []\n        dispatch(setCompletedUpload(false));\n        parsedUsfm.map(async (item, index) => {\n            // let bookName = item.metadata.id.book\n            var apiData = {\n                'sourceId': sourceId,\n                'wholeUsfmText': fileContent[index],\n                'parsedUsfmText': item\n            }\n            await dispatch(uploadBibleTexts(apiData, parsedUsfm[0].metadata.id.book))\n            // this.uploadVersionDetails(apiData)\n        })\n        // dispatch(completedUpload(true));\n        // if (uploadFail) {\n        //     this.setState({ variant: \"error\", snackBarOpen: true, message: this.state.message, snackColor: '#d32f2f' })\n        // }\n    }\n\n    handleFileRead = (e) => {\n        const { fileContent, parsedUsfm } = this.state\n        const content = this.fileReader.result;\n        var jsonOutput = grammar.parse(content)\n        fileContent.push(content)\n        parsedUsfm.push(jsonOutput)\n\n        // this.setState({ fileContent, parsedUsfm, disableUpload: false, progress: false })\n    };\n\n    async handleFileChosen(file) {\n\n        let fileReader = await new FileReader();\n        fileReader.onloadend = (e) => {\n            const { fileContent, parsedUsfm, errorFiles } = this.state\n            const content = fileReader.result;\n            var jsonOutput = grammar.parseUSFM(content)\n            if (jsonOutput.ERROR) {\n                errorFiles.push(file.name)\n                // this.props.displaySnackBar({\n                //     snackBarMessage: jsonOutput.ERROR,\n                //     snackBarOpen: true,\n                //     snackBarVariant: \"error\"\n                // })\n                this.setState({ errorFiles })\n            } else {\n                fileContent.push(content)\n                parsedUsfm.push(jsonOutput)\n                this.setState({ fileContent, parsedUsfm, progress: false })\n            }\n            // this.setState({ progress: false})\n        }\n        // await this.setState({text: \"Adding\"})\n        await fileReader.readAsText(file)\n        // await this.setState({ text: \"completed\"})\n    };\n\n    addFiles = e => {\n        e.preventDefault();\n        const filesObj = e.target.files\n        const filesKeys = Object.keys(filesObj)\n        this.setState({ fileContent: [], parsedUsfm: [], errorFiles: [], progress: true })\n        filesKeys.map(async key => {\n            await this.setState({ progress: true })\n            await this.handleFileChosen(filesObj[key])\n        })\n\n        // this.props.displaySnackBar({\n        //     snackBarMessage: \"added files\",\n        //     snackBarOpen: true,\n        //     snackBarVariant: \"error\"\n        // })\n        // this.setState({ progress: false})\n    }\n    // componentWillReceiveProps(nextProps) {\n    //     const { sourceId } = this.state\n    //     const newSourceId = nextProps\n    //     if (sourceId !== newSourceId) {\n    //         this.setState({\n    //             fileContent: [],\n    //             parsedUsfm: [],\n    //             disableUpload: false\n    //         })\n    //     }\n    // }\n\n    handleSubmit = e => {\n        // e.preventDe  fault();\n        this.uploadFiles()\n    };\n\n\n    render() {\n        const { dialogOpen, close, isFetching } = this.props\n        console.log('upload', this.props);\n        return (\n            <Dialog\n                open={dialogOpen}\n                // onClose={close}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <PopUpMessages />\n                {\n                    isFetching &&\n                    <CircleLoader />\n                }\n                <ComponentHeading data={{ text: \"Upload Sources\", styleColor: '#2a2a2fbd' }} />\n                <DialogTitle id=\"form-dialog-title\"> </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Select the files to be uploaded and click Upload\n                    </DialogContentText>\n                    <Grid container spacing={2}>\n                        <Grid item xs={2}>\n\n                            <label>\n                                {this.state.parsedUsfm.length} {(this.state.parsedUsfm.length > 1) ? 'files' : 'file'}\n                            </label>\n                        </Grid>\n                        <Grid item xs={2}>\n\n                            {(this.state.progress) ? <CircularProgress /> : null}\n                            {(this.state.text) ? this.state.text : null}\n                        </Grid>\n                        <Grid item xs={5}>\n                            <input\n                                style={{ display: 'none' }}\n                                id=\"raised-button-file\"\n                                multiple\n                                type=\"file\"\n                                onChange={this.addFiles}\n                            />\n                            <label htmlFor=\"raised-button-file\">\n                                <Button disabled={this.state.progress} variant=\"contained\" color=\"secondary\" component=\"span\" >\n                                    <AddIcon /> add files\n                                </Button>\n                            </label>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Button disabled={this.state.progress} variant=\"contained\" color=\"inherit\" onClick={this.handleSubmit}>Upload</Button>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button size=\"small\" onClick={close} variant=\"contained\" color=\"secondary\">\n                        Close\n                    </Button>\n                    {/* <Button size=\"small\" onClick={this.handleSend} variant=\"contained\" color=\"primary\">\n                Submit Details\n                </Button> */}\n                </DialogActions>\n                {/* </form> */}\n            </Dialog>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    isFetching: state.sources.isFetching,\n    uploadErrorBooks: state.sources.uploadErrorBooks,\n    completedUpload: state.sources.completedUpload\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(UploadTexts))\n","import React, { Component } from 'react';\nimport {\n    Grid,\n    TextField,\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n\n} from '@material-ui/core';\nimport ComponentHeading from './ComponentHeading';\nimport apiUrl from './GlobalUrl';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux'\nimport { displaySnackBar, createSource } from '../store/actions/sourceActions'\nimport PopUpMessages from './PopUpMessages';\nimport { uploadDialog } from '../store/actions/dialogActions';\n\nimport VirtualizedSelect from 'react-virtualized-select';\nimport \"react-virtualized-select/styles.css\";\nimport 'react-virtualized/styles.css'\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    cursorPointer: {\n        cursor: 'pointer',\n    },\n    uploadPane: {\n        marginTop: '4%'\n    },\n    textField: {\n        margin: 10,\n    },\n    resize: {\n        fontSize: '20px'\n    },\n    selectMenu: {\n        width: 220,\n        margin: 10\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 220,\n\n    }\n});\n\nclass UploadSource extends Component {\n    constructor(props) {\n        super(props)\n        var fileReader;\n        this.fileReader = fileReader\n\n    }\n    state = {\n        versionDetails: [],\n        languageDetails: [],\n        versionContentCode: '',\n        versionContentDescription: '',\n        contentType: '',\n        year: '',\n        license: 'CC BY SA',\n        revision: '',\n        languageid: '',\n        contentid: '',\n        languageName: '',\n        fileContent: [],\n        parsedUsfm: [],\n        languageCode: '',\n        loading: false,\n        display: 'none',\n        counter: 0,\n    }\n\n    async getVersionData() {\n        const data = await fetch(apiUrl + 'v1/bibles', {\n            method: 'GET'\n        })\n        const versionDetails = await data.json()\n        this.setState({ versionDetails })\n    }\n\n    async getLanguagesData() {\n        const data = await fetch(apiUrl + 'v1/languages', {\n            method: 'GET'\n        })\n        const languageDetails = await data.json()\n        this.setState({ languageDetails })\n    }\n\n    componentDidMount() {\n        this.getVersionData()\n        this.getLanguagesData()\n    }\n\n    displayLanguage = () => {\n        return this.state.languageDetails.map(lang => {\n            return (\n                <MenuItem key={lang.languageId} value={lang.languageName}>{lang.languageName}</MenuItem>\n            )\n        })\n    }\n\n    setLanguage = e => {\n        const value = this.state.languageDetails.filter((item) => {\n            return item.languageName === e.target.value\n        })\n        this.setState({ languageName: e.target.value, languageCode: value[0].languageCode, languageid: value[0].languageId })\n    }\n\n    setContent = e => {\n        const value = this.state.contentDetails.filter((item) => {\n            return item.contentType === e.target.value\n        })\n        this.setState({ contentid: value[0].contentId, contentType: e.target.value });\n    }\n\n    \n\n\n    handleSubmit = e => {\n        const { dispatch, close } = this.props;\n        var apiData = {\n            'languageCode': this.state.languageCode,\n            'contentType': this.state.contentType,\n            'versionContentCode': this.state.versionContentCode,\n            'versionContentDescription': this.state.versionContentDescription,\n            'year': this.state.year,\n            'revision': this.state.revision,\n            'license': this.state.license,\n        }\n        this.uploadVersionDetails(apiData)\n        dispatch(createSource(apiData, close))\n\n    }\n\n    render() {\n        const { classes, open, close } = this.props\n\n        var languageData = [];\n        if (this.state.languageDetails != null) {\n            Object.values(this.state.languageDetails).map(lang => {\n                languageData.push({\n                    label: lang.languageName,\n                    value: lang.languageId,\n                    code: lang.languageCode,\n                });\n            });\n        }\n\n        return (\n            <Dialog\n                open={open}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                {/* <PopUpMessages /> */}\n                <ComponentHeading data={{ classes, text: \"Create Source\", styleColor: '#2a2a2fbd' }} />\n                {/* <form className={classes.form} onSubmit={this.handleSubmit}> */}\n                    <DialogTitle id=\"form-dialog-title\"> </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Enter details to create source\n                            </DialogContentText>\n                        <Grid container spacing={1} item xs={12}>\n                        <Grid item xs={6}>\n                                    <InputLabel htmlFor=\"select-revision\">Revision</InputLabel>\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\n                                    <Select\n                                    // native\n                                        value={this.state.revision}\n                                        // variant=\"outlined\"\n                                        onChange={(e) => this.setState({ revision: e.target.value })}\n                                        // variant=\"outlined\"\n                                        // margin=\"dense\"\n                                        inputProps={{\n                                            name: 'revision',\n                                            id: 'select-revision'\n                                        }}\n                                        // className={classes.selectMenu}\n                                    >\n                                        <MenuItem key={1} value={1}>1</MenuItem>\n                                        <MenuItem key={2} value={2}>2</MenuItem>\n                                        <MenuItem key={3} value={3}>3</MenuItem>\n                                        <MenuItem key={4} value={4}>4</MenuItem>\n                                        <MenuItem key={5} value={5}>5</MenuItem>\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <InputLabel htmlFor=\"select-language\">Language</InputLabel>\n                                <VirtualizedSelect className={classes.selectMenu}\n                                    options={languageData}\n                                    id=\"select-language\"\n                                    onChange={(e) => this.setState({\n                                        languageName: e.label,\n                                        languageid: e.value,\n                                        languageCode: e.code\n                                    })}\n                                    value={this.state.languageid}\n                                />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <TextField\n                                    onChange={(e) => this.setState({ versionContentDescription: e.target.value })}\n                                    id=\"version-content-description\"\n                                    label=\"Version Name\"\n                                    className={classes.textField}\n                                    margin=\"dense\"\n                                    variant=\"outlined\"\n                                    // style={{ height: '40px' }}\n                                    required\n                                    inputProps={{\n                                        classes: {\n                                            input: classes.resize\n                                        }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <TextField\n                                    onChange={(e) => this.setState({ versionContentCode: e.target.value })}\n                                    id=\"version-code\"\n                                    label=\"Version Abbreviation\"\n                                    className={classes.textField}\n                                    margin=\"dense\"\n                                    variant=\"outlined\"\n                                />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <TextField\n                                    onChange={(e) => this.setState({ year: e.target.value })}\n                                    id=\"year\"\n                                    label=\"Year\"\n                                    className={classes.textField}\n                                    margin=\"dense\"\n                                    variant=\"outlined\"\n                                />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <TextField\n                                    onChange={(e) => this.setState({ license: e.target.value })}\n                                    id=\"licence\"\n                                    label=\"License\"\n                                    className={classes.textField}\n                                    margin=\"dense\"\n                                    variant=\"outlined\"\n                                    defaultValue=\"CC BY SA\"\n                                />\n                            </Grid>\n                            \n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            color=\"secondary\"\n                            onClick={() => close('createSourceDialog')}\n                        >Close</Button>\n                        <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>Create Source</Button>\n                    </DialogActions>\n                {/* </form> */}\n            </Dialog>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        uploadPane: state.dialog.uploadPane,\n        isFetching: state.sources.isFetching\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(UploadSource));","import React, { Component } from 'react'\nimport jwt_decode from 'jwt-decode';\nimport {\n    Grid,\n    Paper,\n    Button,\n    Table,\n    TableBody,\n    TableHead,\n    TableRow,\n    TableCell,\n    Divider,\n    Link,\n    Typography,\n    createMuiTheme,\n    MuiThemeProvider\n} from '@material-ui/core';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Header from './Header';\nimport UploadTexts from './UploadTexts';\nimport apiUrl from './GlobalUrl';\nimport { withStyles } from '@material-ui/core/styles';\nimport ComponentHeading from './ComponentHeading';\nimport { uploadDialog } from '../store/actions/dialogActions';\nimport { connect } from 'react-redux'\nimport CreateSources from './CreateSources';\nimport { displaySnackBar, fetchBibleLanguages, fetchSourceBooks } from '../store/actions/sourceActions';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport MUIDataTable from \"mui-datatables\";\nimport PopUpMessages from './PopUpMessages';\nimport CircleLoader from './loaders/CircleLoader';\nimport moment from 'moment';\n\n\nconst getMuiTheme = () => createMuiTheme({\n    overrides: {\n        MUIDataTable: {\n            root: {\n            },\n            paper: {\n                boxShadow: \"none\",\n            }\n        },\n        MUIDataTableBodyRow: {\n            root: {\n                '&:nth-child(odd)': {\n                    backgroundColor: '#eaeaea'\n                }\n            }\n        },\n        MUIDataTableBodyCell: {\n        }\n    }\n})\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        overflowY: 'hidden'\n    },\n    versionDisplay: {\n        maxHeight: '80vh',\n        overflow: 'auto',\n        // backgroundColor:'red',\n        // marginLeft: '1%',\n        // marginTop: '1%'\n    },\n    cursorPointer: {\n        margin: 10,\n        cursor: 'pointer',\n    },\n    bookCard: {\n        width: '400px'\n    },\n    fab: {\n        position: 'fixed',\n        bottom: '20px',\n        right: '20px',\n    }\n});\n\nclass ViewSources extends Component {\n    state = {\n        biblesDetails: [],\n        dialogOpen: false,\n        sourceId: '',\n        decoded: {},\n        accessToken: '',\n        availableBooksData: [],\n        createSourceDialog: false,\n        listBooks: false,\n        columns: [\n            {\n                name: 'id',\n                options: {\n                    display: false,\n                    filter: false\n                }\n            },\n            {\n                name: 'Version name',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Version code',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Updated Date',\n                options: {\n                    filter: true,\n                    customBodyRender: (value) => {\n                        return moment(value).format('MMMM Do YYYY')\n                    }\n                }\n            },\n            {\n                name: 'Script',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Language name',\n                options: {\n                    filter: true\n                }\n            },\n\n            {\n                name: 'Language code',\n                options: {\n                    filter: true\n                }\n            }\n        ]\n    }\n\n    closeDialog = () => {\n        this.setState({ dialogOpen: false })\n    }\n\n    async getBiblesData() {\n        const data = await fetch(apiUrl + 'v1/bibles', {\n            method: 'GET'\n        })\n        const biblesDetails = await data.json()\n        this.setState({ biblesDetails })\n    }\n\n    componentDidMount() {\n        this.getBiblesData()\n        var { dispatch, current_user } = this.props\n        // if (accessToken) {\n        //     this.setState({ decoded: jwt_decode(accessToken), accessToken })\n        // }\n        dispatch(fetchBibleLanguages())\n        if (current_user.role !== 'm') {\n            let { columns } = this.state;\n            columns = [...columns, {\n                name: 'Books',\n                options: {\n                    filter: true,\n                    customBodyRender: (value) => {\n                        return <Button onClick={() => this.setState({ listBooks: true }, this.handleBookSelect(value))}>View</Button>\n                    }\n                }\n            }, {\n                name: 'Upload',\n                options: {\n                    filter: true,\n                    customBodyRender: (value) => {\n                        return <Button size=\"small\" variant=\"contained\" onClick={() => this.setState({ dialogOpen: true, sourceId: value })}>Upload</Button>\n                    }\n                }\n\n            }]\n            this.setState({ columns })\n        }\n    }\n\n    handleClose = (value) => {\n        this.setState({\n            [value]: false\n        })\n    }\n\n    displayBooks = () => {\n        const { sourceBooks } = this.props\n        return sourceBooks.map(book => {\n            return (\n                <Grid item xs={2} key={book} >\n                    <Typography>{book}</Typography>\n                </Grid>\n            )\n        })\n    }\n\n\n    closeBookListing = () => {\n        this.setState({ userId: '', projectId: '', listBooks: false })\n    }\n\n    handleSelect = (sourceId) => (e) => {\n        this.setState({ dialogOpen: true, sourceId })\n    }\n\n    handleBookSelect = (sourceId) => (e) => {\n        // this.setState({ listBooks: true, sourceId }, () => this.getBooks())\n        const { dispatch } = this.props;\n        dispatch(fetchSourceBooks(sourceId));\n\n    }\n    render() {\n        // const { classes } = this.props\n        console.log('view sources', this.props)\n        const { classes, bibleLanguages, isFetching, current_user } = this.props;\n        const { columns, open, createSourceDialog } = this.state;\n        var data = []\n        bibleLanguages.map(bible => {\n            bible[\"languageVersions\"].map(version => {\n                data.push([\n                    version.sourceId,\n                    version.version.name,\n                    version.version.code,\n                    version.updatedDate,\n                    version.language.script,\n                    version.language.name,\n                    version.language.code,\n                    version.sourceId,\n                    version.sourceId,\n                ])\n            })\n\n            // [\n            // project.projectId, \n            // project.projectName.split('|')[0], \n            // project.projectName.split('|')[1], \n            // project.organisationName, \n            // project.version.name\n            // ]\n        });\n        console.log('data', data)\n        const options = {\n            selectableRows: false,\n            // onRowClick: rowData => this.setState({redirect: rowData[0]})\n        };\n        return (\n\n            <div className={classes.root}>\n                {/* <PopUpMessages /> */}\n                {isFetching && <CircleLoader />}\n                <MuiThemeProvider theme={getMuiTheme()}>\n                    <MUIDataTable\n                        title={\"Sources List\"}\n                        data={data}\n                        columns={columns}\n                        options={options}\n                    />\n                </MuiThemeProvider>\n                {/* <CreateProject open={open} close={this.handleClose} /> */}\n                {\n                    createSourceDialog &&\n                    <CreateSources open={createSourceDialog} close={this.handleClose} isFetching={isFetching} />\n                }\n                {\n                    current_user.role !== 'm' &&\n                    <Fab aria-label={'add'} className={classes.fab} color={'primary'} onClick={() => this.setState({ createSourceDialog: true })}>\n                        <AddIcon />\n                    </Fab>\n                }\n                {\n                    this.state.listBooks &&\n                    <Dialog\n                        open={this.state.listBooks}\n                    >\n                        {isFetching && <CircleLoader />}\n                        <DialogContent>\n                            <Grid container item className={this.props.classes.bookCard}>\n                                {this.displayBooks()}\n                            </Grid>\n\n\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={this.closeBookListing} variant=\"contained\" color=\"secondary\">Close</Button>\n                        </DialogActions>\n                    </Dialog>\n                }\n                {\n                    this.state.dialogOpen &&\n                    <UploadTexts sourceId={this.state.sourceId} dialogOpen={this.state.dialogOpen} close={this.closeDialog} />\n                }\n            </div>\n            // <Grid item xs={12} md={12} container justify=\"center\" className={classes.root}>\n            //     <Grid item>\n            //         {\n            //             (this.state.decoded && this.state.decoded.role !== 'm') ? (\n            //                 <Grid container justify=\"flex-end\">\n            //                     <Link className={classes.cursorPointer} variant=\"body2\" onClick={() => this.props.uploadDialog({ uploadPane: true })}>\n            //                         {\"Can't find source from the listed? Create new.\"}\n            //                     </Link>\n            //                 </Grid>\n            //             ) : null\n            //         }\n            //         <CreateSources />\n\n            //     </Grid>\n            //     <Grid item xs={11}  >\n            //         <PopUpMessages />\n            //         <Paper className={classes.versionDisplay}>\n            //             <ComponentHeading data={{ text: \"View Sources\", styleColor: '#2a2a2fbd' }} />\n            //             <Divider />\n            //             <Table className={classes.table}>\n            //                 <TableHead>\n            //                     <TableRow>\n            //                         <TableCell align=\"left\">Version Name</TableCell>\n            //                         <TableCell align=\"left\">Version Code</TableCell>\n            //                         <TableCell align=\"left\">Version Long Name</TableCell>\n            //                         <TableCell align=\"left\">Updated Date</TableCell>\n            //                         <TableCell align=\"left\">Script</TableCell>\n            //                         <TableCell align=\"left\">Language Name</TableCell>\n            //                         <TableCell align=\"left\">Language Code</TableCell>\n            //                         {\n            //                             (this.state.decoded && this.state.decoded.role !== 'm') ? (\n            //                                 <TableCell align=\"left\">Books</TableCell>\n            //                             ) : null\n            //                         }\n            //                         {\n            //                             (this.state.decoded && this.state.decoded.role !== 'm') ? (\n            //                                 <TableCell align=\"left\">Action</TableCell>\n            //                             ) : null\n            //                         }\n            //                     </TableRow>\n            //                 </TableHead>\n            //                 <TableBody>\n            //                     {this.state.biblesDetails.map(items => (\n            //                         items[\"languageVersions\"].map(row => (\n            //                             <TableRow key={row.sourceId}>\n            //                                 <TableCell align=\"left\">{row.version.name}</TableCell>\n            //                                 <TableCell align=\"left\">{row.version.code}</TableCell>\n            //                                 <TableCell align=\"left\">{row.version.longName}</TableCell>\n            //                                 <TableCell align=\"left\">{row.updatedDate}</TableCell>\n            //                                 <TableCell align=\"left\">{row.script}</TableCell>\n            //                                 <TableCell align=\"left\">{row.language.name}</TableCell>\n            //                                 <TableCell align=\"left\">{row.language.code}</TableCell>\n            //                                 {\n            //                                     (this.state.decoded && this.state.decoded.role !== 'm') ? (\n\n            //                                         <TableCell align=\"left\">\n            //                                             <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={this.handleBookSelect(row.sourceId)}>Books</Button>\n            //                                         </TableCell>\n            //                                     ) : null\n            //                                 }\n            //                                 {\n            //                                     (this.state.decoded && this.state.decoded.role !== 'm') ? (\n            //                                         <TableCell align=\"left\">\n            //                                             <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={this.handleSelect(row.sourceId)}>Upload</Button>\n            //                                         </TableCell>\n            //                                     ) : null\n            //                                 }\n            //                             </TableRow>\n\n            //                         ))\n            //                     ))}\n            //                 </TableBody>\n            //             </Table>\n\n            //         </Paper>\n            //     </Grid>\n            // </Grid>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isFetching: state.sources.isFetching,\n        bibleLanguages: state.sources.bibleLanguages,\n        sourceBooks: state.sources.sourceBooks,\n        current_user: state.auth.current_user\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(ViewSources));","import React, { Component } from 'react'\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\n// import apiUrl from '../GlobalUrl';\nimport { Divider } from '@material-ui/core';\n\n\n\nexport default class UserDrawer extends Component {\n\n\n    handleOrganisations(){\n        const { updateState } =  this.props\n        updateState({\n            createOrganisationsPane: true\n        })\n    }\n\n    listProjects() {\n        const { updateState } = this.props\n        updateState({\n            listProjectsPane: true,\n        })\n    }\n\n    handleDashboard = (text) => {\n        switch (text) {\n            case 'Create Organisation': this.handleOrganisations(); break;\n            case 'Project Access': this.handleStatistics(); break;\n            case 'Charts': this.handleCharts(); break;\n            case 'My Projects': this.listProjects(); break;\n            default: console.log('no choice')\n        }\n    }\n    render() {\n        const { classes } = this.props\n        return (\n            <Drawer\n                className={classes.drawer}\n                variant=\"permanent\"\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.toolbar} />\n                <ExpansionPanel style={{ backgroundColor: '#2a2a2fbd', color: 'white' }}>\n                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon style={{ color: 'white' }} />}>\n                        <Typography color=\"inherit\" className={classes.heading}>Dashboard</Typography>\n                    </ExpansionPanelSummary>\n                    <List>\n                        {['My Projects', 'Chart'].map((text, index) => (\n                            <ListItem button key={text} className={classes.exp}>\n                                <ListItemText disableTypography divider=\"true\"\n                                    primary={<Typography type=\"body2\" style={{ color: '#FFFFFF' }}\n                                        onClick={() => this.handleDashboard(text)}\n                                    >{text}</Typography>}\n                                />\n                            </ListItem>\n                        ))}\n                    </List>\n                </ExpansionPanel>\n                <Divider />\n                <ExpansionPanel style={{ backgroundColor: '#2a2a2fbd', color: 'white' }}>\n                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon style={{ color: 'white' }} />}>\n                        <Typography color=\"inherit\" className={classes.heading}>Requests</Typography>\n                    </ExpansionPanelSummary>\n                    <List>\n                        {['Create Organisation', 'Project Access'].map((text, index) => (\n                            <ListItem button key={text} className={classes.exp}>\n                                <ListItemText disableTypography divider=\"true\"\n                                    primary={<Typography type=\"body2\" style={{ color: '#FFFFFF' }}\n                                        onClick={() => this.handleDashboard(text)}\n                                    >{text}</Typography>}\n                                />\n                            </ListItem>\n                        ))}\n                    </List>\n                </ExpansionPanel>\n            </Drawer>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { Typography, CardContent } from '@material-ui/core';\nimport apiUrl from '../GlobalUrl';\nimport { Card } from '@material-ui/core';\nimport { CardHeader } from '@material-ui/core';\nimport { selectProject, displaySnackBar } from '../../store/actions/sourceActions';\nimport { connect } from 'react-redux';\nimport PopUpMessages from '../PopUpMessages';\n\n\nconst accessToken = localStorage.getItem('accessToken')\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        padding: theme.spacing(2)\n    },\n    cursorPointer: {\n        cursor: 'pointer',\n    },\n});\n\nclass ListUserProjects extends Component {\n    state = {\n        projects: null,\n        userProjectsData: [],\n    }\n\n    async getProjectData() {\n        try {\n            const data = await fetch(apiUrl + 'v1/autographamt/users/projects', {\n                method: 'GET',\n                headers: {\n                    Authorization: 'bearer ' + accessToken\n                }\n            })\n            const response = await data.json()\n            if ('success' in response) {\n                this.props.displaySnackBar({\n                    snackBarMessage: response.message,\n                    snackBarOpen: true,\n                    snackBarVariant: \"error\"\n                })\n            } else {\n                this.setState({ projects: response })\n            }\n        }\n        catch (ex) {\n            this.props.displaySnackBar({\n                snackBarMessage: \"Server Error\",\n                snackBarOpen: true,\n                snackBarVariant: \"error\"\n            })\n        }\n    }\n\n\n    componentDidMount() {\n        this.getProjectData()\n    }\n\n\n    handleProjects = (project) => {\n        const { updateState } = this.props\n        if (project.books.length > 0) {\n            updateState({\n                listUserProjectsPane: false,\n                displayDashboard: false,\n                translationPane: true,\n            })\n            this.props.selectProject({ project: project })\n\n        } else {\n            this.props.displaySnackBar({\n                snackBarMessage: \"No Books assigned yet\",\n                snackBarOpen: true,\n                snackBarVariant: \"error\"\n            })\n        }\n    }\n\n    displayProjectCards() {\n        const { projects } = this.state\n        const { classes } = this.props\n        if (projects) {\n            return projects.map(project => {\n                return (\n                    <Grid item xs={12} sm={6} md={3} key={project.projectId} style={{ gridRowGap: '2px' }}>\n                        {/* <div className={classes.toolbar} /> */}\n                        <Card onClick={() => this.handleProjects(project)} className={classes.cursorPointer}>\n                            <CardHeader\n                                title={`Organisation: ${project.organisationName}`}\n                                subheader={`Organisation: ${project.organisationName}`} />\n                            <CardContent>\n                                <Typography varian=\"h5\" gutterBottom>\n                                    {project.projectName.split(\"|\")[0]}\n                                </Typography>\n                                <Typography varian=\"h5\" gutterBottom>\n                                    {project.version.name}\n                                </Typography>\n                                <Typography varian=\"h5\" gutterBottom>\n                                    {project.projectName.split(\"|\")[1]}\n                                </Typography>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                )\n            })\n        } else {\n            return <Typography variant=\"h5\">No projects assigned</Typography>\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n\n            <div className={classes.root}>\n                <Grid\n                    container\n                    spacing={1}\n                    style={{ border: '1px solid #eee', padding: '10px' }}\n                >\n                    {this.displayProjectCards()}\n                <PopUpMessages />\n                </Grid>\n            </div>\n        )\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        selectProject: (project) => dispatch(selectProject(project)),\n        displaySnackBar: (popUp) => dispatch(displaySnackBar(popUp)),\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(withStyles(styles)(ListUserProjects))\n","import React, { Component } from 'react';\nimport { FormControl, Grid, MenuItem, Select, InputLabel } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { selectBook } from '../../store/actions/sourceActions';\nimport { setSelectedBook, fetchUserProjects } from '../../store/actions/projectActions';\nimport compose from 'recompose/compose';\nimport { withRouter } from 'react-router-dom';\n// import CircleLoader from '../loaders/CircleLoader';\n\nconst styles = theme => ({\n    selectionGrid: {\n        marginLeft: '4%',\n        marginTop: '1%'\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n        // width: '100%'\n      },\n    selectMenu: {\n        width: '140px',\n        padding: '2px',\n        border: '1px solid black',\n        borderRadius: '10px'\n    },\n});\n\nclass MenuBar extends Component {\n\n    componentDidMount() {\n        // const { dispatch } = this.props;\n        // dispatch(fetchUserProjects());\n    }\n\n    displayBooks() {\n        const { userProjects, location } = this.props\n        if (userProjects.length > 0 ) {\n            const data = userProjects.filter(project => project.projectId === parseInt(location.pathname.split('/').pop()));\n            return data[0].books.map(item => {\n                return (\n                    <MenuItem key={item} value={item}>{item}</MenuItem>\n                )\n            })\n        } else {\n            return (\n                <MenuItem key=\"\" value=\"\" disabled>No books assigned</MenuItem>\n            )\n        }\n    }\n\n    render() {\n        const { classes, selectedBook, dispatch } = this.props\n        console.log('Menu Bar', this.props)\n        return (\n            // <Grid container item xs={12} className={classes.selectionGrid}>\n            //     <Grid container item xs={8}>\n            //         <Grid item xs={2} md={2}>\n            //             <FormControl>\n            //                 <InputLabel htmlFor=\"select-books\">Books</InputLabel>\n            //                 <Select\n            //                     variant=\"filled\"\n            //                     margin=\"dense\"\n            //                     className={classes.selectMenu}\n            //                     value={selectedBook}\n            //                     onChange={(e) => dispatch(setSelectedBook(e.target.value))}\n            //                     inputProps={{\n            //                         id: 'select-books',\n            //                     }}\n            //                 >\n            //                     {this.displayBooks()}\n            //                 </Select>\n            //             </FormControl>\n            //             <br />\n            //             <br />\n            //         </Grid>\n            //     </Grid>\n            // </Grid>\n            <FormControl className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-label\">Select Book</InputLabel>\n        <Select\n                                variant=\"filled\"\n                                margin=\"dense\"\n                                // className={classes.selectMenu}\n                                value={selectedBook}\n                                onChange={(e) => dispatch(setSelectedBook(e.target.value))}\n                                // inputProps={{\n                                //     id: 'select-books',\n                                // }}\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n        //   value={age}\n        //   onChange={handleChange}\n        >\n            {this.displayBooks()}\n          {/* <MenuItem value={10}>Ten</MenuItem>\n          <MenuItem value={20}>Twenty</MenuItem>\n          <MenuItem value={30}>Thirty</MenuItem> */}\n        </Select>\n      </FormControl>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userProjects: state.project.userProjects,\n        selectedBook: state.project.selectedBook\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n})\n\n// export default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(MenuBar))\nexport default compose(\n    withStyles(styles),\n    connect(mapStateToProps, mapDispatchToProps)\n )(withRouter(MenuBar))","import React, { Component } from 'react';\nimport { Grid, ListItem, Divider } from '@material-ui/core';\nimport ComponentHeading from '../ComponentHeading';\nimport apiUrl from '../GlobalUrl'\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { selectToken, selectedBooks } from '../../store/actions/sourceActions';\nimport { fetchTokenList, setSelectedToken } from '../../store/actions/projectActions';\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n    },\n    tokenList: {\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n        height: '70vh',\n        overflowX: 'hidden',\n        overflowY: 'auto',\n        backgroundColor: '#fff',\n    },\n    containerGrid: {\n        // width: '97%',\n        // marginLeft: '2%',\n        // marginRight: '2%',\n        border: '1px solid \"#2a2a2fbd\"',\n        boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\n        height: '100%',\n        backgroundColor: '#fff',\n        height: '640px'\n    },\n});\n\nclass TokenList extends Component {\n    state = {\n        tokenList: []\n    }\n\n    async getTokenList(currentBook, sourceId) {\n        var bookData = await fetch(apiUrl + 'v1/tokenlist/' + sourceId + '/' + currentBook, {\n            method: 'GET'\n        })\n        const tokenList = await bookData.json();\n        this.setState({ tokenList: tokenList })\n    }\n\n    componentDidUpdate(prevProps) {\n        if(prevProps.selectedBook !== this.props.selectedBook) {\n            // this.props.dispatch(fetchTokenList(this.props.book, this.props.selectedProject.sourceId))\n            this.props.dispatch(fetchTokenList(this.props.selectedBook, this.props.selectedProject.sourceId))\n        }\n    }\n\n    // componentWillReceiveProps(nextProps) {\n    //     const { book, project } = nextProps\n    //     if(book){\n    //         this.getTokenList(book, project.sourceId)\n    //     }else{\n    //         this.setState({tokenList: []})\n    //     }\n    // }\n\n    getTokens() {\n        const { tokenList, dispatch } = this.props\n        if (tokenList) {\n            return tokenList.map((item, index) => {\n                return (\n                    <div\n                        key={item + index}>\n                        <ListItem button\n                            name={item}\n                            value={item}\n                            onClick={() => dispatch(setSelectedToken(item))}>{item}\n                        </ListItem>\n                        <Divider />\n                    </div>\n                )\n            })\n        } else {\n            return <ListItem>Select Target Language to display tokens</ListItem>\n        }\n    }\n\n    render() {\n        const { classes } = this.props\n        console.log('Token list', this.props)\n        return (\n            <Grid item xs={12} className={classes.containerGrid}>\n                <Grid item xs={12}>\n                    <ComponentHeading data={{\n                        classes: classes, text: \"Token List\",\n                        styleColor: \"#2a2a2fbd\"\n                    }} />\n                </Grid>\n                <Grid item xs={12} className={classes.tokenList}>\n                    {this.getTokens()}\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => ({\n    projects: state.project.projects,\n    isFetching: state.project.isFetching,\n    userProjects: state.project.userProjects,\n    selectedBook: state.project.selectedBook,\n    tokenList: state.project.tokenList,\n    selectedProject: state.project.selectedProject\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(TokenList))","import React, { Component } from 'react'\nimport { Grid } from '@material-ui/core';\nimport ComponentHeading from '../ComponentHeading';\nimport { ListItem } from '@material-ui/core';\nimport { Divider } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport apiUrl from '../GlobalUrl';\nimport { saveReference } from '../../store/actions/sourceActions';\nimport { connect } from 'react-redux';\nimport { fetchConcordances, setReference } from '../../store/actions/projectActions';\n\nconst styles = theme => ({\n    root: {\n        display:'flex',\n        flexGrow: 1,\n      },\n      highlightToken: {\n        color: 'blue',\n        backgroundColor: 'yellow'\n      },\n      textDisplay: {\n        padding: theme.spacing(),\n        color: theme.palette.text.secondary,\n        backgroundColor: '#fff',\n        height: '120px',\n        overflow: 'auto',\n        textAlign: 'justify',\n        lineHeight: '20px',\n      },\n      containerGrid: {\n        // width: '97%',\n        // marginLeft: '2%',\n        // marginRight: '2%',\n        border: '1px solid \"#2a2a2fbd\"',\n        boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\n        height: '320px',\n        backgroundColor: '#fff',\n      },\n});\n\nclass Concordance extends Component {\n    state = {\n        concordance: '',\n        currentToken: ''\n    }\n\n    lengthCheck(item){\n        var num = item.toString()\n        if(num.length === 1){\n            return '0' + num\n        }else{\n            return num\n        }\n    }\n\n    async getVerseText(token, sourceId, book ) {\n        if(book){\n            const data = await fetch(apiUrl + '/v1/concordances/' + sourceId + '/' + book + '/' + token, {\n                method: 'GET'\n            })\n            const concordance = await data.json()\n            await this.setState({ concordance: concordance })\n        }\n    }\n\n    componentDidUpdate(prevProps){\n        const { selectedToken, selectedProject, selectedBook, dispatch } = this.props\n        if(prevProps.selectedToken !== selectedToken){\n            dispatch(fetchConcordances(selectedToken, selectedProject.sourceId, selectedBook));\n            // this.getVerseText(token, project.sourceId, book )\n        }\n    }\n\n    // componentWillReceiveProps(nextProps){\n        \n    // }\n\n    storeBCV = (book, chapter, verse) => {\n        this.props.dispatch(setReference({\n            reference: book + this.lengthCheck(chapter) + this.lengthCheck(verse),\n            verseNum:{\n                book:book,\n                chapter: this.lengthCheck(chapter),\n                verse: this.lengthCheck(verse)\n            }\n        }))\n    }\n\n    displayConcordance(value, token) {\n        if (value) {\n            return value.map((item, index) => {\n                const bcv = item.book + item.chapterNumber + item.verseNumber\n                const { book, chapterNumber, verseNumber, verse, bookCode } = item\n                return (\n                    <div\n                    key={bcv + 'p' + index}>\n                    <ListItem button\n                    value={bcv}\n                    onClick={() => this.storeBCV(bookCode, chapterNumber, verseNumber)}>\n                    <p>{book.toUpperCase()} {chapterNumber}:{verseNumber}&nbsp;\n                    {verse.split(\" \").map((span, index) => {\n                        if (span.includes(token)) {\n                            return (\n                                <span key={bcv + span + index} \n                                className={this.props.classes.highlightToken} \n                                >\n                                 {span}&nbsp;\n                                 </span>\n                            )\n                        } else {\n                            return (\n                                <span key={bcv + span + index}> {span}&nbsp; </span>\n                            )\n                        }\n                    }\n                    )}\n                    </p>\n                    </ListItem>\n                    <Divider />\n                    </div>\n                )\n            })\n        } else {\n            return <p>Select Token to Load Data</p>\n        }\n    }\n    render() {\n        const { classes } = this.props\n        const { selectedBook, selectedToken, concordance } = this.props\n        // const { concordance } = this.state\n        return (\n            <Grid container item xs={12} className={classes.containerGrid}>\n                {/* <Paper className={classes.tokenList}> */}\n                {/* <Grid item xs={12}> */}\n                    <Grid item xs={12}>\n                        <ComponentHeading data={{\n                            classes: classes,\n                            text: selectedBook ? `${selectedBook.toUpperCase()} Concordance` : 'Concordance',\n                            styleColor: \"#2a2a2fbd\"\n                        }} />\n                    </Grid>\n                    <Grid item xs={12} className={classes.textDisplay}>\n\n                        {this.displayConcordance(concordance[selectedBook.toLowerCase()], selectedToken)}\n                    </Grid>\n                {/* </Grid> */}\n                {/* <Grid item xs={12}> */}\n                    <Grid item xs={12}>\n                        <ComponentHeading data={{\n                            classes: classes,\n                            text: `All Books Concordance`,\n                            styleColor: \"#2a2a2fbd\"\n                        }} />\n                    </Grid>\n                    <Grid item xs={12} className={classes.textDisplay}>\n                        {this.displayConcordance(concordance.all, selectedToken)}\n                    </Grid>\n                {/* </Grid> */}\n                {/* </Paper> */}\n            </Grid>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedProject: state.project.selectedProject,\n        selectedToken: state.project.selectedToken,\n        selectedBook: state.project.selectedBook,\n        concordance: state.project.concordance\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n});\n\nexport default connect(mapStateToProps,mapDispatchToProps )(withStyles(styles)(Concordance))","import React, { Component } from 'react';\nimport ComponentHeading from '../ComponentHeading';\nimport { Grid } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux'\n\nconst styles = theme => ({\n    root: {\n        display:'flex',\n        flexGrow: 1,\n      },\n      tokenList: {\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n        height: '30vh',\n        overflowX: 'hidden',\n        overflowY: 'auto',\n        backgroundColor: '#fff',\n      },\n      containerGrid: {\n        //   width: '97%',\n        //   marginLeft: '2%',\n        //   marginRight: '2%',\n          border: '1px solid \"#2a2a2fbd\"',\n          boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\n          height: '320px',\n          backgroundColor: '#fff',\n      },\n});\n\nconst ReactMarkdown = require('react-markdown/with-html');\n\n\n\n\nclass TranslationNotes extends Component {\n    state = {\n        translationNotes: 'Select Concordance to Fetch Notes',\n        currentRefse: ''\n    }\n\n\n    async getTranslationNotes(book, chapter, verse){\n        try{\n            const data = await fetch('https://git.door43.org/api/v1/repos/BCS-EXEGETICAL/hi_tN/raw/Content%2F' + book.toUpperCase() +  '%2F' + chapter + '%2F' + verse + '.md', {\n                method:'GET',\n                header: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n                }\n              })\n            const result = await data.text()\n            this.setState({translationNotes:result, currentRef: this.props.reference})\n        }\n        catch(ex){\n            this.setState({translationNotes:\"No Data available\"})\n        }\n    }\n\n    componentWillReceiveProps(nextProps){\n        const { reference, verseNum } = nextProps\n        const { currentRef } = this.state\n        \n        if(reference && currentRef !== reference){\n            const { book, chapter, verse } = verseNum\n            this.getTranslationNotes(book, chapter, verse)\n        }else{\n            this.setState({translationNotes: 'Select Concordance to Fetch Notes'})\n        }\n    }\n    \n    displayTranslationNotes = () => {\n        // this.getApiData()\n        const { translationNotes } = this.state\n        // if(translationNotes){\n            return (\n                <ReactMarkdown\n                source={translationNotes}\n                escapeHtml={true}\n                />\n            )\n        // }\n    }\n    render() {\n        const { classes } = this.props\n        return (\n            <Grid item xs={12} className={classes.containerGrid}>\n                <Grid container item xs={12}>\n                    <Grid item xs={12}>\n                        <ComponentHeading data={{\n                            classes: classes,\n                            text: \"Translation Notes\",\n                            styleColor: \"#2a2a2fbd\"\n                        }} />\n                    </Grid>\n                    <Grid item xs={12} className={classes.tokenList}>\n                        {this.displayTranslationNotes()}\n                        {/* {this.testGit()} */}\n                    </Grid>\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        reference: state.project.reference,\n        verseNum: state.project.verseNum\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(TranslationNotes));","import React, { Component } from 'react'\nimport { Grid } from '@material-ui/core';\nimport ComponentHeading from '../ComponentHeading';\nimport { ListItem } from '@material-ui/core';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { withStyles } from '@material-ui/core/styles';\nimport apiUrl from '../GlobalUrl'\nimport { connect } from 'react-redux'\n\nconst styles = theme => ({\n    root: {\n        display:'flex',\n        flexGrow: 1,\n      },\n      tokenList: {\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n        height: '30vh',\n        overflowX: 'hidden',\n        overflowY: 'auto',\n        backgroundColor: '#fff',\n      },\n      containerGrid: {\n        // width: '97%',\n        // marginLeft: '2%',\n        // marginRight: '2%',\n        // border: '1px solid #3e51b5',\n        border: '1px solid \"#2a2a2fbd\"',\n        boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\n        height: '320px',\n        backgroundColor: '#fff',\n      },\n});\n\n\n\nclass TranslationWords extends Component {\n    state = {\n        translationWords: '',\n        currentToken:''\n    }\n\n    async getTranslationWords(sourceId, token) {\n        const data = await fetch(apiUrl + '/v1/translationshelps/words/' + sourceId + '/' + token, {\n            method: 'GET'\n        })\n        const translationWords = await data.json()\n        if (translationWords) {\n            this.setState({ translationWords: translationWords, currentToken: this.props.token })\n        }\n    }\n\n    componentDidUpdate(prevProps){\n        const { selectedProject, selectedToken } = this.props\n        // const { currentToken } = this.state\n        if(prevProps.selectedToken !== selectedToken){\n            this.getTranslationWords(selectedProject.sourceId, selectedToken)\n        }\n    }\n\n    displayTranslationWords() {\n        const { classes } = this.props\n        const { translationWords } = this.state\n        if (translationWords) {\n            var tWkeys = Object.keys(translationWords)\n            return tWkeys.map((item, index) => {\n                return (\n                    <ExpansionPanel\n                        key={index}>\n                        <ExpansionPanelSummary\n                            expandIcon={<ExpandMoreIcon />}\n                            aria-controls=\"panel1a-content\"\n                            id=\"panel1a-header\"\n                        >\n                            <Typography className={classes.heading}>{item}</Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                            <Typography color=\"inherit\">\n                                {translationWords[item]}\n                            </Typography>\n                        </ExpansionPanelDetails>\n                    </ExpansionPanel>\n                )\n            })\n        } else {\n            return <ListItem>No data available</ListItem>\n        }\n    }\n\n    render() {\n        const { classes } = this.props\n        return (\n            <Grid item xs={12} className={classes.containerGrid}>\n                <Grid container item xs={12}>\n                    <Grid item xs={12}>\n                        <ComponentHeading data={{\n                            classes: classes,\n                            text: \"Translation Words\",\n                            styleColor: \"#2a2a2fbd\"\n                        }} />\n                    </Grid>\n                    <Grid item xs={12} className={classes.tokenList}>\n                        {this.displayTranslationWords()}\n                    </Grid>\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n        selectedToken: state.project.selectedToken,\n        selectedProject: state.project.selectedProject\n})\n\nexport default connect(mapStateToProps)(withStyles(styles)(TranslationWords))","import React, { Component } from 'react';\nimport { Grid, Button, Typography } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport ComponentHeading from '../ComponentHeading';\nimport PopUpMessages from '../PopUpMessages';\nimport Chip from '@material-ui/core/Chip';\nimport apiUrl from '../GlobalUrl';\n// import Container from '@material-ui/core/Container';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux'\nimport { displaySnackBar } from '../../store/actions/sourceActions';\nimport { getTranslatedWords, updateTransaltion } from '../../store/actions/projectActions';\n\nconst accessToken = localStorage.getItem('accessToken')\n\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        flexGrow: 1,\n    },\n    inputField: {\n        width: '90%',\n        marginLeft: '10px'\n    },\n    containerGrid: {\n        // width: '97%',\n        // marginLeft: '2%',\n        // marginRight: '2%',\n        border: '1px solid \"#2a2a2fbd\"',\n        boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\n        height: '320px',\n        backgroundColor: '#fff',\n    },\n    button: {\n        margin: '10px'\n    }\n});\n\nclass UpdateTokens extends Component {\n    state = {\n        translation: '',\n        snackBarOpen: false,\n        popupdata: {},\n        senses: [],\n        sense: '',\n        token: ''\n    }\n\n\n\n    // componentWillReceiveProps(nextProps) {\n    //     const { token, project } = nextProps\n    //     if (token) {\n    //         this.setState({ token, targetLanguageId: project.targetId, sourceId: project.sourceId })\n    //         this.getTranslatedWords(token, project.sourceId, project.targetId)\n    //     }\n\n    // }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedToken !== this.props.selectedToken) {\n            if (this.props.selectedProject.sourceId) {\n                const { selectedToken, selectedProject } = this.props;\n                this.props.dispatch(getTranslatedWords(selectedToken, selectedProject.sourceId, selectedProject.targetId))\n            }\n        }\n    }\n\n    clearTransaltionState = () => {\n        this.setState({\n            translation: '',\n            sense: ''\n        })\n    }\n\n    updateTokenTranslation = () => {\n        const { selectedProject, selectedToken, dispatch } = this.props;\n        const { translation } = this.state;\n        const apiData = {\n            projectId: selectedProject.projectId,\n            token: selectedToken,\n            translation: translation,\n            senses: ''\n        }\n        dispatch(updateTransaltion(apiData, this.clearTransaltionState))\n    }\n\n    updateTokenSense = () => {\n        const { selectedProject, selectedToken, dispatch } = this.props;\n        const { sense } = this.state;\n        const apiData = {\n            projectId: selectedProject.projectId,\n            token: selectedToken,\n            translation: '',\n            senses: [sense]\n        }\n        dispatch(updateTransaltion(apiData, this.clearTransaltionState))\n    }\n\n\n    displaySenses() {\n        const { senses } = this.props\n        if (senses) {\n            return senses.map(item => {\n                return (\n                    <Chip\n                        key={item}\n                        label={item}\n                        component=\"a\"\n                        clickable\n                    />\n                )\n            })\n        }\n    }\n\n    // handleSubmit = e => {\n    //     e.preventDefault();\n    //     this.updateTransaltion();\n    // }\n\n    closeSnackBar = (item) => {\n        this.setState(item)\n    }\n\n    // submitSenses = () => {\n    //     const { senses, sense } = this.state\n    //     if (sense) {\n    //         senses.push(sense)\n    //         this.updateTransaltion()\n    //         this.setState({ sense: '' })\n    //         this.getTranslatedWords()\n    //     }\n    // }\n\n    render() {\n        const { classes, selectedProject, selectedToken, translation, senses } = this.props\n        console.log('update', this.props)\n        // const { translation } = this.state\n        var displayLanguage = ''\n        if (selectedProject.projectName) {\n            displayLanguage = selectedProject.projectName.split('|')[0].split('-')[2]\n        }\n        return (\n            <Grid item xs={12} className={classes.containerGrid}>\n                <Grid item xs={12}>\n                    <ComponentHeading data={{ classes: classes, text: `Enter ${displayLanguage} Translation`, styleColor: \"#2a2a2fbd\" }} />\n                </Grid>\n                <PopUpMessages />\n                <Grid container item xs={12}>\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            disabled\n                            margin=\"dense\"\n                            variant=\"outlined\"\n                            label={selectedToken}\n                            className={classes.inputField}\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            required\n                            label=\"Enter Translation\"\n                            value={this.state.translation ? this.state.translation : translation}\n                            onChange={(e) => this.setState({ translation: e.target.value })}\n                            margin=\"dense\"\n                            variant=\"outlined\"\n                            className={classes.inputField}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid container justify=\"center\" alignItems=\"center\">\n\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        // style={{ marginLeft: '30%', marginTop: '3%' }}\n                        // style={{ margin: 'auto' }}\n                        onClick={this.updateTokenTranslation}>Update Token</Button>\n                </Grid>\n                <Grid container item xs={12}>\n                    {/* <Grid item xs={12} style={{ marginTop: '5%', marginBottom: '5px' }}> */}\n                    <Grid container justify=\"center\" alignItems=\"center\">\n                        <Typography variant=\"inherit\" align=\"center\" style={{ color: 'rgb(145, 148, 151)' }}>\n                            Add alternate translations\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            required\n                            label=\"Enter Senses\"\n                            value={this.state.sense}\n                            onChange={(e) => this.setState({ sense: e.target.value })}\n                            margin=\"dense\"\n                            variant=\"outlined\"\n                            className={classes.inputField}\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <Grid container justify=\"center\" alignItems=\"center\">\n                            {/* <Grid item xs={12} sm={6} style={{ marginTop: '7%' }}> */}\n                            <Button\n                                className={classes.button}\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                onClick={this.updateTokenSense}>Add Senses</Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} style={{ margin: '2%' }}>\n                    <Typography variant=\"inherit\" align=\"left\" style={{ color: 'rgb(145, 148, 151)' }}>\n                        Synonyms:\n                    </Typography>\n                </Grid>\n                <Grid item xs={12} style={{\n                    margin: '2%',\n                }}>\n                    {this.displaySenses()}\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedProject: state.project.selectedProject,\n        selectedToken: state.project.selectedToken,\n        translation: state.project.translation,\n        senses: state.project.senses\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(UpdateTokens))","import React, { Component } from 'react';\nimport { Grid } from '@material-ui/core';\nimport MenuBar from './MenuBar';\nimport TokenList from './TokenList';\nimport Concordance from './Concordance';\nimport TranslationsNotes from './TranslationNotes';\nimport TranslationsWords from './TranslationWords';\nimport UpdateTokens from './UpdateTokens';\nimport { Switch } from '@material-ui/core';\nimport { Typography } from '@material-ui/core';\n// import StatisticsSummary from '../StatisticsSummary';\nimport { withStyles } from '@material-ui/styles';\nimport { connect } from 'react-redux';\nimport { setSelectedProject, fetchUserProjects } from '../../store/actions/projectActions';\nimport CircleLoader from '../loaders/CircleLoader';\nimport compose from 'recompose/compose';\nimport { withRouter } from 'react-router-dom';\n// import Header from '../Header';\n\nconst styles = theme => ({\n    root: {\n        // backgroundColor: '#ededf4',\n        paddingTop: '8px',\n        margin: 0,\n        width: '100%'\n    }\n});\n\nclass HomePage extends Component {\n    state = {\n        book: '',\n        tokenList: '',\n        token: '',\n        concordance: '',\n        targetLanguageId: 20,\n        translationWords: '',\n        tNswitchChecked: false,\n        tWswitchChecked: false,\n        tokenPane: 3,\n        translationPane: 4,\n        concordancePane: 5,\n        displayConcordancePane: 'block',\n        translationWordsPane: 4,\n        displayTranslationWords: 'none',\n        translationNotesPane: 3,\n        displayTranslationNotes: 'none',\n        translationNotes: '',\n        displayTranslationWordSwitch: 'none',\n        tokenTranslation: '',\n        senses: []\n    }\n\n    updateState = (value) => {\n        this.setState(value)\n    }\n\n    componentDidMount() {\n        const { dispatch } = this.props;\n        dispatch(fetchUserProjects());\n    }\n\n    componentDidUpdate(prevProps) {\n        if(prevProps.userProjects !== this.props.userProjects){\n            const projectId = this.props.location.pathname.split('/').pop();\n            const selectedProject = this.props.userProjects.filter(item => item.projectId === parseInt(projectId))\n            if(selectedProject.length > 0){\n                this.props.dispatch(setSelectedProject(selectedProject[0]));\n            }\n        }\n    }\n\n    handleTNSwitchChange = e => {\n        const { tNswitchChecked } = this.state\n        if (tNswitchChecked) {\n            this.setState({\n                tNswitchChecked: !tNswitchChecked,\n                tokenPane: 3,\n                translationPane: 4,\n                concordancePane: 5,\n                displayTranslationNotes: 'none',\n                displayTranslationWordSwitch: 'none',\n                displayTranslationWords: 'none',\n                displayConcordancePane: 'block',\n                tWswitchChecked: false\n\n            })\n        } else {\n            this.setState({\n                tNswitchChecked: !tNswitchChecked,\n                tokenPane: 2,\n                translationPane: 3,\n                concordancePane: 4,\n                displayTranslationNotes: 'block',\n                displayTranslationWordSwitch: 'block'\n            })\n        }\n    }\n\n    handleTWSwitchChange = e => {\n        const {\n            tWswitchChecked,\n        } = this.state\n        if (!tWswitchChecked) {\n            this.setState({\n                tWswitchChecked: !tWswitchChecked,\n                displayConcordancePane: 'none',\n                displayTranslationWords: 'block',\n                // displayTranslationWordSwitch:'block'\n            })\n        } else {\n            this.setState({\n                tWswitchChecked: !tWswitchChecked,\n                displayConcordancePane: 'block',\n                displayTranslationWords: 'none',\n                // displayTranslationWordSwitch:'none'\n            })\n        }\n    }\n\n    render() {\n        const { classes, isFetching } = this.props\n        const {\n            // book,\n            // token,\n            // tokenTranslation,\n            // senses,\n            // concordance,\n            tokenPane,\n            // tokenList,\n            translationPane,\n            concordancePane,\n            displayConcordancePane,\n            translationWordsPane,\n            // translationWords,\n            translationNotesPane,\n            // translationNotes,\n            displayTranslationWordSwitch\n        } = this.state\n        console.log('homepage', this.props)\n        return (\n            <Grid container spacing={2} className={classes.root}>\n                {/* <Grid container> */}\n                { isFetching && <CircleLoader />}\n                <Grid item xs={3} style={{minHeight: '480px'}}>\n                    <Grid item xs={12}>\n                        <MenuBar\n                            updateState={this.updateState}\n                        />\n                    </Grid>\n                    {/* <Grid container alignItems=\"center\" justify=\"center\" item xs={2}> */}\n                    {/* <Grid item xs={3}>\n                        <Grid container>\n                            <Grid itm xs={8}>\n                                \n                                <Typography variant=\"subtitle2\" color=\"textSecondary\" style={{ display: displayTranslationWordSwitch }}>\n                                Translation Words\n                                </Typography>\n                            </Grid>\n                            <Grid itm xs={4}>\n                                <div style={{ display: displayTranslationWordSwitch }}>\n                                    <Switch\n                                        checked={this.state.tWswitchChecked}\n                                        onChange={this.handleTWSwitchChange}\n                                    />\n                                </div>\n                            </Grid>\n                        </Grid>\n                        \n                        \n                    </Grid> */}\n                    {/* <Grid container alignItems=\"center\" justify=\"flex-end\" item xs={3}> */}\n                    {/* <Grid item xs={3}>\n                        <Grid container>\n                            <Grid itm xs={8}>\n                                \n                                <Typography variant=\"subtitle2\" color=\"textSecondary\" >\n                                    Translation Helps\n                                </Typography>\n                            </Grid>\n                            <Grid itm xs={4}>\n                                <Switch\n                                checked={this.state.tNswitchChecked}\n                                onChange={this.handleTNSwitchChange}\n                                />\n                            </Grid>\n                        </Grid>\n                        \n                    </Grid> */}\n                {/* </Grid> */}\n                {/* <Grid container item xs={12}> */}\n                    {/* <Grid item xs={12}> */}\n                        <TokenList />\n                    {/* </Grid> */}\n                    </Grid>\n                    <Grid item xs={4}>\n                    {/* <Grid item xs={12}> */}\n                        <UpdateTokens />\n                    {/* </Grid> */}\n                    {/* <Grid item xs={12} > */}\n                        <TranslationsWords />\n                    {/* </Grid> */}\n                    </Grid>\n\n                    <Grid item xs={5}>\n                    <Grid item xs={12}\n                        // style={{ display: displayConcordancePane }}\n                    >\n                        <Concordance />\n                    </Grid>\n                    <Grid item xs={12} >\n                        <TranslationsNotes />\n                    </Grid>\n                    </Grid>\n                {/* </Grid> */}\n            </Grid>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    projects: state.project.projects,\n    isFetching: state.project.isFetching,\n    userProjects: state.project.userProjects\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n})\n\n// export default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(HomePage))\nexport default compose(\n    withStyles(styles),\n    connect(mapStateToProps, mapDispatchToProps)\n )(withRouter(HomePage))","import { SET_ORGANISATIONS, SET_IS_FETCHING } from './actionConstants';\nimport apiUrl from '../../components/GlobalUrl.js';\nimport swal from 'sweetalert';\n\nconst accessToken = localStorage.getItem('accessToken');\n\nexport const fetchOrganisations = () => async (dispatch) => {\n    try{\n        dispatch(setIsFetching(true))\n        const data = await fetch(apiUrl + 'v1/autographamt/organisations', {\n            method:'GET',\n            headers: {\n                \"Authorization\": 'bearer ' + accessToken\n            }\n        })\n        const organisations = await data.json()\n        dispatch(setOrganisations(organisations));\n    }\n    catch(e) {\n        swal({\n            title: 'Organisations',\n            text: 'Unable to fetch organisations, check your internet connection or contact admin',\n            icon: 'error'\n        })\n\n    }\n    dispatch(setIsFetching(false));\n}\n\nexport const updateOrganisationVerifiedStatus = (data) => async dispatch => {\n    try{\n        dispatch(setIsFetching(true));\n        const update = await fetch(apiUrl + 'v1/autographamt/approvals/organisations', {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: {\n                Authorization: 'bearer ' + accessToken\n            }\n        })\n        const response = await update.json();\n        console.log('response', response)\n        if(response.success) {\n            dispatch(fetchOrganisations());\n            swal({\n                title: 'Organisation status',\n                text: 'Organisation status has been updated successfully',\n                icon: 'success'\n            })\n        } else {    \n            swal({\n                title: 'Organisation status',\n                text: 'Organisation status could not be updated. Please try again later',\n                icon: 'error'\n            })\n        }\n    }\n    catch(e) {\n        swal({\n            title: 'Organisations status',\n            text: 'Unable to update organisations, check your internet connection or contact admin',\n            icon: 'error'\n        })\n\n    }\n    dispatch(setIsFetching(false));\n}\n\nexport const createOrganisation = (apiData) => async dispatch =>{\n    dispatch(setIsFetching(true))\n    try {\n        const data = await fetch(apiUrl + '/v1/autographamt/organisations', {\n            method:'POST',\n            body: JSON.stringify(apiData),\n            headers: {\n                Authorization: 'bearer ' + accessToken\n            }\n        })\n        const myJson = await data.json()\n        if(myJson.success){\n            swal({\n                title: 'Create organisations',\n                text: myJson.message,\n                icon: 'success'\n            })\n        }else{\n            swal({\n                title: 'Create organisations',\n                text: myJson.message,\n                icon: 'error'\n            })\n        }\n    }\n    catch(e) {\n        swal({\n            title: 'Create Organisations',\n            text: 'Unable to create organisations, check your internet connection or contact admin',\n            icon: 'error'\n        })\n    }\n    dispatch(setIsFetching(false));\n}\n\nexport const setOrganisations = (organisations) => ({\n    type: SET_ORGANISATIONS,\n    organisations\n});\n\nexport const setIsFetching = (status) => ({\n    type: SET_IS_FETCHING,\n    status\n})","import React, { Component } from 'react'\nimport {\n    Grid,\n    TextField,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    Typography\n} from '@material-ui/core';\nimport apiUrl from '../GlobalUrl';\nimport ComponentHeading from '../ComponentHeading';\nimport PopUpMessages from '../PopUpMessages';\nimport { withStyles } from '@material-ui/styles';\nimport { connect } from 'react-redux'\nimport { displaySnackBar } from '../../store/actions/sourceActions';\nimport Container from '@material-ui/core/Container';\nimport { createOrganisation } from '../../store/actions/organisationActions';\n\n\nvar accessToken = localStorage.getItem('accessToken')\n\nconst styles = theme => ({\n    root:{\n        display:'flex',\n    },\n    pageContainer: {\n        marginTop: '5%'\n    },\n});\n\nclass CreateOrganisations extends Component {\n    state = {\n        organisationName: '',\n        organisationAddress: '',\n        organisationEmail: '',\n        organisationPhone: '',\n    }\n\n    \n\n    closeSnackBar = (item) => {\n        this.setState(item)\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const {organisationName, organisationAddress, organisationEmail, organisationPhone} = this.state\n        const apiData = {\n            organisationName: organisationName,\n            organisationAddress: organisationAddress,\n            organisationEmail: organisationEmail,\n            organisationPhone: organisationPhone,\n        }\n        this.props.dispatch(createOrganisation(apiData, this.clearState));\n    }\n\n    // handleOk = () => {\n    //     this.setState({ redirect: true })\n    // }\n\n    handleClose = () => {\n        this.setState({ verificationDialogOpen: false })\n    }\n\n    clearState = () => {\n        this.setState({\n            organisationName: '',\n            organisationAddress: '',\n            organisationEmail: '',\n            organisationPhone: '',\n         })\n    }\n\n    // handleSend = () => {\n    //     this.createOrganisation()\n    // }\n\n\n    // closeSnackBar = (item) => {\n    //     this.setState(item)\n    // }\n\n\n    render() {\n        // const { popupdata } = this.state\n        const { createOrganisationsPane, classes } = this.props\n        return (\n            <Grid item xs={12}>\n                {/* <Header /> */}\n                {/* <PopUpMessages /> */}\n                <Container component=\"main\" maxWidth=\"xs\" className={classes.pageContainer}>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Create Organisation\n                </Typography>\n                    <form className={classes.form} onSubmit={this.handleLoginSubmit}>\n                                <TextField\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    id=\"organisationName\"\n                                    label=\"Organisation Name\"\n                                    name=\"organisationName\"\n                                    autoComplete=\"organisationName\"\n                                    autoFocus\n                                onChange={(e) => this.setState({ organisationName: e.target.value })}\n                                />\n                                <TextField\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    id=\"organisationAddress\"\n                                    label=\"Address\"\n                                    name=\"organisationAddress\"\n                                    autoComplete=\"organisationAddress\"\n                                    autoFocus\n                                onChange={(e) => this.setState({ organisationAddress: e.target.value })}\n                                />\n                                <TextField\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    id=\"organisationEmail\"\n                                    label=\"Email\"\n                                    type=\"email\"\n                                    name=\"organisationEmail\"\n                                    autoComplete=\"organisationEmail\"\n                                    autoFocus\n                                onChange={(e) => this.setState({ organisationEmail: e.target.value })}\n                                />\n                                <TextField\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    required\n                                    fullWidth\n                                    id=\"organisationPhone\"\n                                    label=\"Phone\"\n                                    name=\"organisationPhone\"\n                                    autoComplete=\"organisationPhone\"\n                                    autoFocus\n                                onChange={(e) => this.setState({ organisationPhone: e.target.value })}\n                                />\n                        \n                        \n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={this.handleSubmit}\n                        >\n                            Create\n                        </Button>\n                    </form>\n                </Container>\n            </Grid>\n\n\n            \n        )\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n})\n\nexport default connect(null, mapDispatchToProps)(withStyles(styles)(CreateOrganisations))","import React from 'react';\nimport { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Header from '../Header';\nimport UserDrawer from './UserDrawer';\nimport ListUserProjects from './ListUserProjects';\nimport HomePage from '../Translations/HomePage';\nimport CreateOrganisations from '../Assignments/CreateOrganisations';\n\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        flexGrow: 1,\n    },\n    exp: {\n        backgroundColor: '#100f0ffa',\n        '&:hover': {\n            background: \"#f00\",\n        },\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n        backgroundColor: '#262f3d'\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(1),\n    },\n    toolbar: theme.mixins.toolbar,\n});\n\nclass UserDashboard extends Component {\n    state = {\n        userProjectsData: [],\n        listUserProjectsPane: true,\n        displayDashboard: true,\n        translationPane: false,\n        createOrganisationsPane: false,\n        selectedProject: {}\n\n    }\n\n    updateState = (item) => {\n        this.setState(item)\n    }\n    render() {\n        const { classes } = this.props;\n        const { \n            displayDashboard, \n            listUserProjectsPane,\n            translationPane,\n            selectedProject,\n            createOrganisationsPane\n        } = this.state\n        return (\n            <div className={classes.root}>\n                <CssBaseline />\n                <AppBar position=\"fixed\" className={classes.appBar}>\n                    <Header  />\n                </AppBar>\n                {\n                    (displayDashboard) ? (\n                    <UserDrawer\n                        classes={classes}\n                        updateState={this.updateState}\n                    />\n                    ) : null\n                }\n                <main className={classes.content}>\n                    <div className={classes.toolbar} />\n                    {(listUserProjectsPane) ? (\n                        <ListUserProjects\n                            updateState={this.updateState}\n                        />\n                    ) : null}\n                    {\n                        (translationPane) ? (\n                            <HomePage selectedProject={selectedProject}\n                            classes={classes} />\n                        ) : null\n                    }\n                    {\n                        (createOrganisationsPane) ? (\n                            <CreateOrganisations selectedProject={selectedProject}\n                            createOrganisationsPane={createOrganisationsPane}\n                            classes={classes}\n                            updateState={this.updateState} />\n                        ) : null\n                    }\n                </main>\n            </div>\n        );\n    }\n}\n\n// AdminPage.propTypes = {\n//     classes: PropTypes.object.isRequired,\n// };\n\nexport default withStyles(styles)(UserDashboard);","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { InputLabel, FormControl, Select, MenuItem } from '@material-ui/core';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\nimport { fetchBibleLanguages, fetchAllLanguages } from '../../store/actions/sourceActions';\nimport { fetchOrganisations } from '../../store/actions/organisationActions';\nimport { createProject } from '../../store/actions/projectActions';\nimport VirtualizedSelect from 'react-virtualized-select';\nimport CircleLoader from '../loaders/CircleLoader';\nimport \"react-select/dist/react-select.css\";\nimport \"react-virtualized-select/styles.css\";\nimport './style.css'\n\nconst styles = theme => ({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    dailog: {\n        minHeight: '300px'\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: '100%',\n        margin: 0\n      },\n    selectMenu: {\n        width: '95%',\n    },\n    virtualSelect: {\n        width: '95%'\n    },\n    label: {\n        paddingLeft: '10px'\n    },\n    labelOrd: {\n        paddingTop: '12px'\n    }\n  });\n\nclass CreateProject extends Component {\n    state = {\n        source: [],\n        sourceId: '',\n        targetId: '',\n        target: '',\n        organisationId: ''\n    }\n    componentDidMount() {\n        const { dispatch } = this.props;\n        dispatch(fetchBibleLanguages());\n        dispatch(fetchAllLanguages());\n        dispatch(fetchOrganisations());\n    }\n\n    clearState = () => {\n        this.setState({\n            source: [],\n            sourceId: '',\n            targetId: '',\n            target: '',\n            organisationId: ''\n        })\n    }\n\n    displayLanguage = () => {\n        const { bibleLanguages } = this.props\n        if (bibleLanguages.length > 0) {\n            return bibleLanguages.map(lang => {\n                const langObj = lang.languageVersions[0]\n                const landId = langObj.language.id\n                return (\n                    <MenuItem key={langObj.language.id} value={lang.languageVersions}>{langObj.language.name}</MenuItem>\n                )\n            })\n        } else {\n            return <MenuItem>No languages</MenuItem>\n        }\n        // const { }\n    }\n\n    displayVersions = () => {\n        const { source } = this.state;\n        if(source.length > 0){\n            return source.map(item => {\n                return <MenuItem key={item.sourceId} value={item.sourceId}>{item.version.code}</MenuItem>\n            })\n        } else {\n            return <MenuItem>No version</MenuItem>\n        }\n    }\n\n    displayOrganisations = () => {\n        const { organisations } = this.props\n        if (organisations.length > 0) {\n            return organisations.map(item => {\n                return <MenuItem key={item.organisationId} value={item.organisationId}>{item.organisationName}</MenuItem>\n            })\n        } else {\n            return <MenuItem>No organisations</MenuItem>\n        }\n    }\n\n    handleSubmit = () => {\n        const { sourceId, targetId, organisationId } = this.state;\n        const { dispatch, close } = this.props;\n        const apiData = {\n            sourceId: sourceId,\n            targetLanguageId: targetId,\n            organisationId: organisationId\n        }\n        dispatch(createProject(apiData, close, this.clearState));\n    }\n\n    render() {\n        const { source, sourceId, targetId, organisationId } = this.state;\n        const { classes, open, close, allLanguages, isFetching } = this.props;\n        var languageData = [];\n        if (this.state.allLanguages !== null) {\n            Object.values(allLanguages).map(lang => {\n                languageData.push({\n                    label: lang.languageName,\n                    value: lang.languageId,\n                    code: lang.languageCode,\n                });\n            });\n        }\n        console.log('Create Project', this.props)\n        console.log('State Projects', this.state)\n        return (\n            <Dialog onClose={close} aria-labelledby=\"customized-dialog-title\" open={open}\n            fullWidth={true}\n            maxWidth={'sm'}\n            >\n                { isFetching && <CircleLoader />}\n                <DialogTitle id=\"customized-dialog-title\" onClose={close}>\n                <Typography variant=\"h6\">Create project</Typography>\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={close}>\n                        <CloseIcon />\n                    </IconButton>\n                </DialogTitle>\n                <DialogContent dividers \n            className={classes.dailog}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <FormControl className={classes.formControl}>\n                                <InputLabel className={classes.label} htmlFor=\"select-language\">Language</InputLabel>\n                                <Select className={classes.selectMenu}\n                                    inputProps={{\n                                        id: 'select-language'\n                                    }}\n                                    value={source}\n                                    variant={\"outlined\"}\n                                    onChange={(e) => this.setState({source: e.target.value})}\n                                    // onChange={(e) => this.setState({\n                                    //     language: e.target.value,\n                                    //     version: '',\n                                    //     targetLanguage: ''\n                                    // })\n                                    // }\n                                    >\n                                    {this.displayLanguage()}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        {/* <Grid item xs={6}> */}\n                        <Grid item xs={6}>\n                            <FormControl className={classes.formControl}>\n                                <InputLabel className={classes.label} htmlFor=\"select-version\">Version</InputLabel>\n                                <Select className={classes.selectMenu}\n                                    inputProps={{\n                                        id: 'select-version'\n                                    }}\n                                    value={sourceId}\n                                    variant={\"outlined\"}\n                                    onChange={(e) => this.setState({sourceId: e.target.value})}\n                                    >\n                                    {this.displayVersions()}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        {/* </Grid> */}\n                        <Grid item xs={6}>\n                        {/* <FormControl className={classes.formControl}> */}\n                        <InputLabel className={classes.label} htmlFor=\"select-target\">Target</InputLabel>\n                            <VirtualizedSelect className={classes.virtualSelect}\n                                options={languageData}\n                                onChange={(e) => this.setState({\n                                    target: e.label,\n                                    targetId: e.value\n                                })}\n                                value={targetId}\n                            />\n                            {/* </FormControl> */}\n                        </Grid>\n                        <Grid item xs={6}>\n                            \n                        <FormControl className={classes.formControl} style={{paddingTop: '16px'}}>\n                                <InputLabel className={classes.labelOrg}  htmlFor=\"select-organisation\">Organisation</InputLabel>\n                                <Select className={classes.selectMenu}\n                                    inputProps={{\n                                        id: 'select-organisation'\n                                    }}\n                                    value={organisationId}\n                                    variant={\"outlined\"}\n                                    onChange={(e) => this.setState({organisationId: e.target.value})}\n                                    >\n                                    {this.displayOrganisations()}\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button autoFocus onClick={close} color=\"secondary\" size={\"small\"} variant={'contained'}>\n                        Close\n                    </Button>\n                    <Button autoFocus onClick={this.handleSubmit} color=\"primary\" size={\"small\"} variant={'contained'}>\n                        Create\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    projects: state.project.projects,\n    isFetching: state.project.isFetching,\n    bibleLanguages: state.sources.bibleLanguages,\n    allLanguages: state.sources.allLanguages,\n    organisations: state.organisation.organisations\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(CreateProject));\n","import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { Typography, CardContent, Paper, createMuiTheme, MuiThemeProvider } from '@material-ui/core';\nimport apiUrl from '../GlobalUrl';\nimport { Card } from '@material-ui/core';\nimport { CardHeader } from '@material-ui/core';\nimport { displaySnackBar, selectProject } from '../../store/actions/sourceActions'\nimport { fetchProjects } from '../../store/actions/projectActions';\nimport CircleLoader from '../loaders/CircleLoader';\nimport { connect } from 'react-redux'\nimport PopUpMessages from '../PopUpMessages';\nimport MUIDataTable from \"mui-datatables\";\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport CreateProject from './CreateProject';\nimport { Redirect } from 'react-router-dom';\nimport compose from 'recompose/compose';\nimport { withRouter } from 'react-router-dom';\n\nconst accessToken = localStorage.getItem('accessToken')\n\nconst getMuiTheme = () => createMuiTheme({\n    overrides: {\n        MUIDataTable: {\n            root: {\n            },\n            paper: {\n                boxShadow: \"none\",\n            }\n        },\n        MUIDataTableBodyRow: {\n            root: {\n                '&:nth-child(odd)': {\n                    backgroundColor: '#eaeaea'\n                }\n            }\n        },\n        MUIDataTableBodyCell: {\n        }\n    }\n})\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        padding: theme.spacing(2),\n        // backgroundColor: '#ededf4',\n        // minHeight: '100%'\n    },\n    cursorPointer: {\n        cursor: 'pointer',\n        backgroundColor: '#fff',\n        '&:hover': {\n            background: '#ededf4',\n        },\n    },\n    cardHover: {\n        backgroundColor: '#100f0ffa',\n        '&:hover': {\n            background: \"#f00\",\n        },\n    },\n    fab: {\n        position: 'fixed',\n        bottom: '16px',\n        right: '16px',\n    }\n});\n\nclass ListProjects extends Component {\n    state = {\n        redirect: null,\n        open: false,\n        columns: [\n            {\n                name: 'id',\n                options: {\n                    display: false,\n                    filter: false\n                }\n            },\n            {\n                name: 'Project Name',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Project Code',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Organisation',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Source',\n                options: {\n                    filter: true\n                }\n            }\n        ]\n    }\n\n    componentDidMount() {\n        const { dispatch } = this.props;\n        dispatch(fetchProjects());\n    }\n\n    handleClose = () => {\n        this.setState({ open: false })\n    }\n\n    render() {\n        const { classes, projects, isFetching, current_user } = this.props;\n        const { columns, open } = this.state;\n        const data = projects.map(project => {\n            return [\n                project.projectId,\n                project.projectName.split('|')[0],\n                project.projectName.split('|')[1],\n                project.organisationName,\n                project.version.name\n            ]\n        });\n        const options = {\n            selectableRows: false,\n            onRowClick: rowData => this.setState({ redirect: rowData[0] })\n        };\n        console.log('projects', this.props)\n        const { redirect } = this.state;\n        if (redirect) {\n            return <Redirect to={`/app/projects/${redirect}`} />\n        }\n        return (\n            <div className={classes.root}>\n                {/* <PopUpMessages /> */}\n                {isFetching && <CircleLoader />}\n                <MuiThemeProvider theme={getMuiTheme()}>\n                    <MUIDataTable\n                        title={\"Projects List\"}\n                        data={data}\n                        columns={columns}\n                        options={options}\n                    />\n                </MuiThemeProvider>\n                <CreateProject open={open} close={this.handleClose} />\n                {\n                    current_user.role !== 'm' &&\n                    <Fab aria-label={'add'} className={classes.fab} color={'primary'} onClick={() => this.setState({ open: true })}>\n                        <AddIcon />\n                    </Fab>\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    projects: state.project.projects,\n    isFetching: state.project.isFetching,\n    current_user: state.auth.current_user\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n})\n\n\n// export default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(ListProjects));\nexport default compose(\n    withStyles(styles),\n    connect(mapStateToProps, mapDispatchToProps)\n)(withRouter(ListProjects))","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\n\nconst styles = theme => ({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nclass CreateOrganisation extends Component {\n    render() {\n        const { classes, open, close } = this.props;\n        console.log(this.props);\n        return (\n            <Dialog onClose={close} aria-labelledby=\"customized-dialog-title\" open={open}\n            fullWidth={true}\n            maxWidth={'sm'}>\n                <DialogTitle id=\"customized-dialog-title\" onClose={close}>\n                <Typography variant=\"h6\">Create organisation</Typography>\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={close}>\n                        <CloseIcon />\n                    </IconButton>\n                </DialogTitle>\n                <DialogContent dividers>\n                </DialogContent>\n                <DialogActions>\n                    <Button autoFocus onClick={close} color=\"secondary\" size={\"small\"} variant={'contained'}>\n                        Close\n                    </Button>\n                    <Button autoFocus onClick={close} color=\"primary\" size={\"small\"} variant={'contained'}>\n                        Create\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    organisations: state.organisation.organisations,\n    isFetching: state.organisation.isFetching\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(CreateOrganisation))","import React, { Component } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableHead from '@material-ui/core/TableHead';\nimport { Checkbox, Paper, createMuiTheme, MuiThemeProvider } from '@material-ui/core';\nimport ComponentHeading from '../ComponentHeading';\nimport { withStyles } from '@material-ui/styles';\nimport apiUrl from '../GlobalUrl';\nimport PopUpMessages from '../PopUpMessages';\nimport { connect } from 'react-redux';\nimport { fetchOrganisations, updateOrganisationVerifiedStatus } from '../../store/actions/organisationActions';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport { displaySnackBar } from '../../store/actions/sourceActions';\nimport CircleLoader from '../loaders/CircleLoader';\nimport CreateOrganisation from './CreateOrganisation';\n\nimport { Switch } from '@material-ui/core';\nimport MUIDataTable from \"mui-datatables\";\n\nconst getMuiTheme = () => createMuiTheme({\n    overrides: {\n      MUIDataTable: {\n        root: {\n        },\n        paper: {\n          boxShadow: \"none\",\n        }\n      },\n      MUIDataTableBodyRow: {\n        root: {\n          '&:nth-child(odd)': { \n            backgroundColor: '#eaeaea'\n          }\n        }\n      },\n      MUIDataTableBodyCell: {\n      }\n    }\n  })\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        // padding: theme.spacing(2),\n        padding: '16px'\n        // backgroundColor: '#ededf4',\n        // minHeight: '100%'\n    },\n    cursorPointer: {\n      cursor: 'pointer',\n      backgroundColor: '#fff',\n      '&:hover': {\n          background: '#ededf4',\n      },\n    },\n    cardHover: {\n        backgroundColor: '#100f0ffa',\n        '&:hover': {\n            background: \"#f00\",\n        },\n    },\n    fab: {\n        position: 'fixed',\n        bottom: '16px',\n        right: '16px',\n    }\n});\n\nconst accessToken = localStorage.getItem('accessToken')\n\nclass ListOrganisations extends Component {\n    state = {\n        open: false,\n        columns: [\n            {\n                name: 'id',\n                options: {    \n                    display: false,\n                    filter: false\n                }\n            },\n            {\n                name: 'Organisation Name',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Email',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Address',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Phone',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Verified',\n                options: {\n                    filter: false,\n                    customBodyRender: (value, row) => {\n                        return <Switch\n                                checked={value}\n                                onChange={() => this.updateOrganisationStatus(row.rowData[0], !value)}\n                            />\n                    }\n                }\n            },\n            {\n                name: 'Admin Id',\n                options: {\n                    filter: true,\n                    display: false\n                }\n            }\n        ]\n    }\n\n    updateOrganisationStatus = (organisationId, status) => {\n        const { dispatch } = this.props;\n        const apiData = {\n            organisationId: organisationId,\n            verified: status\n        }\n        dispatch(updateOrganisationVerifiedStatus(apiData))\n    }\n    \n    componentDidMount(){\n        const { dispatch } = this.props;\n        dispatch(fetchOrganisations())\n    }\n\n    handleClose = () => {\n        this.setState({open: false})\n    }\n\n    render() {\n        const {  classes, organisations, isFetching } = this.props;\n        const { columns, open } = this.state;\n        const data = organisations.map(organisation => {\n            return [\n                organisation.organisationId,\n                organisation.organisationName,\n                organisation.organisationEmail,\n                organisation.organisationAddress,\n                organisation.organisationPhone,\n                organisation.verified,\n                organisation.userId,\n            ]\n        });\n        const options = {\n            selectableRows: false,\n          };\n        return (\n            <div className={classes.root}>\n                <PopUpMessages />\n                { isFetching && <CircleLoader />}\n                <MuiThemeProvider theme={getMuiTheme()}>\n                <MUIDataTable \n                    title={\"Organisations List\"} \n                    data={data} \n                    columns={columns} \n                    options={options} \n                />\n                </MuiThemeProvider>\n                <CreateOrganisation open={open} close={this.handleClose} />\n                <Fab aria-label={'add'} className={classes.fab} color={'primary'} onClick={() => this.setState({open: true})}>\n                    <AddIcon />\n                </Fab>\n            </div>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => ({\n    organisations: state.organisation.organisations,\n    isFetching: state.organisation.isFetching\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(ListOrganisations))","import { SET_USERS, SET_IS_FETCHING, SET_ASSIGNED_USERS, SET_USER_BOOKS } from './actionConstants';\nimport apiUrl from '../../components/GlobalUrl.js';\nimport swal from 'sweetalert';\n\nconst accessToken = localStorage.getItem('accessToken');\n\nexport const fetchUsers = () => async dispatch => {\n    try {\n        dispatch(setIsFetching(true))\n        const data = await fetch(apiUrl + 'v1/autographamt/users', {\n            method: 'GET',\n            headers: {\n                \"Authorization\": 'bearer ' + accessToken\n            }\n        })\n        const userData = await data.json();\n        dispatch(setUsers(userData));\n    }\n    catch (e) {\n        swal({\n            title: 'Users',\n            text: 'Unable to fetch users, check your internet connection or contact admin',\n            icon: 'error'\n        })\n    }\n    dispatch(setIsFetching(false))\n};\n\nexport const updateAdminStatus = (data) => async dispatch => {\n    try {\n        dispatch(setIsFetching(true))\n        const update = await fetch(apiUrl + 'v1/autographamt/approvals/users', {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: {\n                Authorization: 'bearer ' + accessToken\n            }\n        });\n        const response = await update.json();\n        if (response.success) {\n            dispatch(fetchUsers());\n            swal({\n                title: 'User status',\n                text: 'User status has been updated successfully',\n                icon: 'success'\n            })\n        } else {\n            swal({\n                title: 'User status',\n                text: 'User status could not be updated. Please try later',\n                icon: 'error'\n            })\n        }\n    }\n    catch (e) {\n        swal({\n            title: 'Users',\n            text: 'Unable to update users, check your internet connection or contact admin',\n            icon: 'error'\n        })\n    }\n    dispatch(setIsFetching(false))\n};\n\nexport const getAssignedUsers = (projectId) => async dispatch => {\n    try {\n        dispatch(setIsFetching(true))\n        const data = await fetch(apiUrl + 'v1/autographamt/projects/assignments/' + projectId, {\n            method: 'GET',\n            headers: {\n                Authorization: 'bearer ' + accessToken\n            }\n        })\n        const assignedUsers = await data.json()\n        if (!assignedUsers.message) {\n            // this.setState({ assignedUsers })\n            dispatch(setAssignedUsers(assignedUsers))\n            dispatch(setIsFetching(false));\n        } else {\n            dispatch(setIsFetching(false))\n            swal({\n                title: 'Assigned Users',\n                text: assignedUsers.message,\n                icon: 'error'\n            })\n\n        }\n    }\n    catch (e) {\n        dispatch(setIsFetching(false))\n        swal({\n            title: 'Assigned Users',\n            text: 'Unable to fetch assigned users, check your internet connection or contact admin' + e,\n            icon: 'error'\n        })\n    }\n}\n\nexport const assignUserToProject = (apiData) => async dispatch => {\n    dispatch(setIsFetching(true))\n    try {\n        const data = await fetch(apiUrl + 'v1/autographamt/projects/assignments', {\n            method: 'POST',\n            body: JSON.stringify(apiData)\n        })\n        const myJson = await data.json()\n        console.log('Assigning', myJson)\n        dispatch(setIsFetching(false))\n        dispatch(getAssignedUsers(apiData.projectId))\n        swal({\n            title: 'User assignment',\n            text: 'User has been assigned to project',\n            icon: 'success'\n        });\n    } catch (ex) {\n        dispatch(setIsFetching(false))\n        swal({\n            title: 'User assignment',\n            text: 'Unable to update user to project, check your internet connection or contact admin',\n            icon: 'error'\n        })\n    }\n}\n\nexport const deleteUser = (apiData) => async dispatch => {\n    dispatch(setIsFetching(true))\n    try {\n\n        const data = await fetch(apiUrl + 'v1/autographamt/projects/assignments', {\n            method: 'DELETE',\n            body: JSON.stringify(apiData)\n        })\n        const response = await data.json()\n        dispatch(setIsFetching(false))\n        if (response.success) {\n            swal({\n                title: 'Remove user',\n                text: 'User successfully removed from project',\n                icon: 'success'\n            })\n            dispatch(getAssignedUsers(apiData.projectId));\n\n        } else {\n            swal({\n                title: 'Remove user',\n                text: response.message,\n                icon: 'error'\n            })\n\n        }\n    }\n    catch (e) {\n\n        swal({\n            title: 'User assignment',\n            text: 'Unable to remove user from project, check your internet connection or contact admin',\n            icon: 'error'\n        })\n    }\n}\n\nexport const getUserBooks = (userId, projectId) => async dispatch =>{\n    try {\n        dispatch(setIsFetching(true))\n        const data = await fetch(apiUrl + 'v1/sources/projects/books/' + projectId + '/' + userId, {\n            method: 'GET',\n            headers: {\n                Authorization: 'bearer ' + accessToken\n            }\n        })\n        const response = await data.json()\n        dispatch(setIsFetching(false))\n        console.log('books', response)\n        if(\"success\" in response){\n            swal({\n                title: 'Fetch books',\n                text: response.message,\n                icon: 'error'\n            })\n        }else{\n            dispatch(setUserBooks(response))\n            // swal({\n            //     title: 'Fetch books',\n            //     text: 'Books fetched successfully',\n            //     icon: 'success'\n            // });\n        }\n    }\n    catch (ex) {\n        dispatch(setIsFetching(false))\n        swal({\n            title: 'Fetch books',\n            text: 'Unable to fetch books of users, check your internet connection or contact admin',\n            icon: 'error'\n        });\n    }\n}\n\nexport const setUsers = (users) => ({\n    type: SET_USERS,\n    users\n});\n\nexport const setAssignedUsers = users => ({\n    type: SET_ASSIGNED_USERS,\n    users\n});\n\nexport const setUserBooks = books => ({\n    type: SET_USER_BOOKS,\n    books\n});\n\nexport const setIsFetching = (status) => ({\n    type: SET_IS_FETCHING,\n    status\n})","import React, { Component } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableHead from '@material-ui/core/TableHead';\nimport { Checkbox, Paper, createMuiTheme, MuiThemeProvider } from '@material-ui/core';\nimport ComponentHeading from '../ComponentHeading';\nimport apiUrl from '../GlobalUrl'\nimport PopUpMessages from '../PopUpMessages'\nimport { displaySnackBar } from '../../store/actions/sourceActions';\nimport CircleLoader from '../loaders/CircleLoader';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\n\n\nimport { fetchUsers, updateAdminStatus } from '../../store/actions/userActions';\n\n\nimport { Switch } from '@material-ui/core';\nimport MUIDataTable from \"mui-datatables\";\n\nconst accessToken = localStorage.getItem('accessToken')\n\nconst getMuiTheme = () => createMuiTheme({\n    overrides: {\n      MUIDataTable: {\n        root: {\n        },\n        paper: {\n          boxShadow: \"none\",\n        }\n      },\n      MUIDataTableBodyRow: {\n        root: {\n          '&:nth-child(odd)': { \n            backgroundColor: '#eaeaea'\n          }\n        }\n      },\n      MUIDataTableBodyCell: {\n      }\n    }\n  })\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        // padding: theme.spacing(2),\n        padding: '16px'\n        // backgroundColor: '#ededf4',\n        // minHeight: '100%'\n    },\n    cursorPointer: {\n      cursor: 'pointer',\n      backgroundColor: '#fff',\n      '&:hover': {\n          background: '#ededf4',\n      },\n    },\n    cardHover: {\n        backgroundColor: '#100f0ffa',\n        '&:hover': {\n            background: \"#f00\",\n        },\n    },\n});\n\n\nclass ListUsers extends Component {\n    state = {\n        userId: '',\n        admin: '',\n        snackBarOpen: false,\n        popupdata: {},\n        userData:[], \n        userStatus: {},\n        columns: [\n            {\n                name: 'id',\n                options: {    \n                    display: false,\n                    filter: false\n                }\n            },\n            {\n                name: 'Name',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Email',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Verified',\n                options: {\n                    filter: false,\n                    customBodyRender: (value, row) => {\n                        // console.log(rowIndex)\n                        return <Switch\n                                checked={value}\n                                // onChange={() => this.changeAdminStatus(row.rowData[0], !value)}\n                            />\n                    }\n                }\n            },\n            {\n                name: 'Admin',\n                options: {\n                    filter: false,\n                    customBodyRender: (value, row) => {\n                        return <Switch\n                                checked={value}\n                                onChange={() => this.changeAdminStatus(row.rowData[0], !value)}\n                            />\n                    }\n                }\n            }\n        ]\n    }\n\n    componentDidMount(){\n        const { dispatch } = this.props;\n        dispatch(fetchUsers())\n    }\n\n    changeAdminStatus = (userId, status) => {\n        const { dispatch } = this.props;\n        const apiData = {\n            userId: userId,\n            admin: status\n        }\n        dispatch(updateAdminStatus(apiData));\n    }\n\n    handleChange = (userId) => {\n        const { userStatus } = this.state\n        const admin = !userStatus[userId][\"admin\"]\n        this.userAdminAssignment(admin, userId)\n        userStatus[userId][\"admin\"] = admin\n        this.setState({ userId, admin: !admin })\n    }\n\n    closeSnackBar = (item) => {\n        this.setState(item)\n    }\n\n    render() {\n        const {  classes, users, isFetching } = this.props;\n        const { columns } = this.state;\n        const data = users.map(user => {\n            return [\n                user.userId,\n                user.firstName + \" \" + user.lastName,\n                user.emailId,\n                user.verified,\n                user.roleId > 1\n            ]\n        });\n        const options = {\n            selectableRows: false,\n          };\n        return (\n            <div className={classes.root}>\n                <PopUpMessages />\n                { isFetching && <CircleLoader />}\n                <MuiThemeProvider theme={getMuiTheme()}>\n                <MUIDataTable \n                    title={\"Users List\"} \n                    data={data} \n                    columns={columns} \n                    options={options} \n                />\n                </MuiThemeProvider>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    users: state.user.users,\n    isFetching: state.user.isFetching\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(ListUsers))","import React, { Component } from 'react'\nimport { Grid } from '@material-ui/core';\nimport { Typography } from '@material-ui/core'\nimport { withStyles } from '@material-ui/styles';\nimport { connect } from 'react-redux';\nimport apiUrl from './GlobalUrl';\nimport { displaySnackBar } from '../store/actions/sourceActions';\n\n\nconst styles = theme => ({\n    statisticsPane: {\n        // backgroundColor: '#626ed4',\n        backgroundColor: '#2e639a',\n        padding: '10px',\n        color: '#fff',\n        border: '1px solid #eee',\n        borderRadius: '5px'\n    },\n\n});\n\nclass StatisticsSummary extends Component {\n    state = {\n        statistics: null\n    }\n\n    async getProjectStatistcs() {\n        try {\n            const { project } = this.props\n            const data = await fetch(apiUrl + 'v1/autographamt/statistics/projects/' + project.projectId)\n            const response = await data.json()\n            if (response.success === false) {\n                this.props.displaySnackBar({\n                    snackBarMessage: response.message,\n                    snackBarOpen: true,\n                    snackBarVariant: \"error\"\n                })\n            } else {\n                this.setState({ statistics: response })\n            }\n        }\n        catch (ex) {\n            this.props.displaySnackBar({\n                snackBarMessage: \"Server Error\",\n                snackBarOpen: true,\n                snackBarVariant: \"error\"\n            })\n        }\n    }\n\n    componentDidMount() {\n        this.getProjectStatistcs()\n    }\n\n    render() {\n        const { statistics } = this.state\n        const { classes, project } = this.props\n        return (\n            <Grid container spacing={2}>\n                <Grid item xs={3} className={classes.statisticsPane}>\n                    <Typography align=\"center\" variant=\"h5\">\n                        {(project) ? project.projectName.split(\"|\")[0] : null}\n                    </Typography>\n                    <Typography align=\"center\" variant=\"body1\" gutterBottom>\n                        {(project) ? project.version.name : null}\n                    </Typography>\n                </Grid>\n                <Grid item xs={3} className={classes.statisticsPane}>\n                    <Typography align=\"center\" variant=\"h5\">\n                        Project Summary\n                    </Typography>\n                    <Typography align=\"center\" variant=\"body1\" gutterBottom>\n                        {(statistics) ? Object.keys(statistics.bookWiseData).length : null} Books\n                    </Typography>\n                </Grid>\n                <Grid item xs={3} className={classes.statisticsPane}>\n                    <Typography align=\"center\" variant=\"h5\">\n                        Completed\n                    </Typography>\n                    <Typography  align=\"center\" variant=\"body1\" gutterBottom>\n                        {(statistics) ? statistics.projectData.completed : null} %\n                    </Typography>\n                </Grid>\n                <Grid item xs={3} className={classes.statisticsPane}>\n                    <Typography align=\"center\" variant=\"h5\">\n                        Pending\n                    </Typography>\n                    <Typography align=\"center\" variant=\"body1\" gutterBottom>\n                        {(statistics) ? statistics.projectData.pending : null} %\n                    </Typography>\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        project: state.sources.project\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        displaySnackBar: (popUp) => dispatch(displaySnackBar(popUp))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(StatisticsSummary))\n","import React, { Component } from 'react'\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableHead from '@material-ui/core/TableHead';\nimport { Checkbox, Button, Paper, List } from '@material-ui/core';\nimport ComponentHeading from '../ComponentHeading';\nimport apiUrl from '../GlobalUrl';\nimport { Typography } from '@material-ui/core';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport AddIcon from '@material-ui/icons/Add';\nimport ListItem from '@material-ui/core/ListItem';\nimport { Divider } from '@material-ui/core';\nimport PopUpMessages from '../PopUpMessages';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { displaySnackBar } from '../../store/actions/sourceActions';\nimport { connect } from 'react-redux'\nimport StatisticsSummary from '../StatisticsSummary';\nimport { getUserBooks, getAssignedUsers, fetchUsers, assignUserToProject, deleteUser } from '../../store/actions/userActions';\nimport compose from 'recompose/compose';\nimport { withRouter } from 'react-router-dom';\nimport CircleLoader from '../loaders/CircleLoader';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        padding: theme.spacing(2),\n        // backgroundColor: '#383c5d',\n        // backgroundColor: '#f8f8fa',\n        // backgroundColor: '#ededf4',\n        // height: '100vh'\n    },\n    toolbar: theme.mixins.toolbar,\n    gridSize: {\n        height: 340,\n        width: 300\n    },\n    listItem: {\n        border: '1px solid #eee',\n    },\n    checkBox: {\n        // backgroundColor: '#383c5d',\n        // backgroundColor: '#5b3a89',\n        // padding:'10px',\n        // color: '#fff',\n        border: '1px solid #eee',\n        // border: '1px solid #eee',\n        // padding: '10px'\n        // backgroundColor: '#141c29'\n    },\n    statisticsPane: {\n        // backgroundColor: '#383c5d',\n        // backgroundColor: '#fff',\n        // backgroundColor: '#626ed4',\n        // padding: '10px',\n        // color: '#fff',\n        // border: '1px solid #eee',\n        // borderRadius: '5px',\n        minHeight: '50px'\n    },\n    bookCard: {\n        width:'400px'\n    },\n});\n\nconst accessToken = localStorage.getItem('accessToken')\n\nclass AssignUser extends Component {\n\n    state = {\n        userListing: false,\n        listBooks: false,\n        availableBooks: [],\n        assignedUsers: [],\n        availableBooksData: {},\n        userId: '',\n        projectId: '',\n        userStatus: {},\n        userData: [],\n        statistics: null\n    }\n\n    // async getUsers() {\n    //     const { userStatus } = this.state\n    //     const data = await fetch(apiUrl + '/v1/autographamt/users', {\n    //         method: 'GET',\n    //         headers: {\n    //             \"Authorization\": 'bearer ' + accessToken\n    //         }\n    //     })\n    //     const userData = await data.json()\n    //     if (\"success\" in userData) {\n    //         this.props.displaySnackBar({\n    //             snackBarMessage: userData.message,\n    //             snackBarOpen: true,\n    //             snackBarVariant: (userData.success) ? \"success\" : \"error\"\n    //         })\n    //     } else {\n    //         userData.map(item => {\n    //             if (item.roleId > 1) {\n    //                 userStatus[item.userId] = {\n    //                     \"admin\": true,\n    //                     \"verified\": item.verified\n    //                 }\n    //             } else {\n    //                 userStatus[item.userId] = {\n    //                     \"admin\": false,\n    //                     \"verified\": item.verified\n    //                 }\n    //             }\n    //         })\n    //         this.setState({ userData: userData, userStatus: userStatus })\n    //     }\n    // }\n\n    // async getAssignedUsers() {\n    //     const { projectId } = this.props.project\n    //     const data = await fetch(apiUrl + 'v1/autographamt/projects/assignments/' + projectId, {\n    //         method: 'GET',\n    //         headers: {\n    //             Authorization: 'bearer ' + accessToken\n    //         }\n    //     })\n    //     const assignedUsers = await data.json()\n    //     if (!assignedUsers.message) {\n    //         this.setState({ assignedUsers })\n    //     }\n    // }\n\n    componentDidMount() {\n        // this.getUsers()\n        // this.getAssignedUsers()\n        const { dispatch, location } = this.props;\n        const projectId = location.pathname.split('/').pop()\n        console.log('project id', projectId)\n        // dispatch(getUserBooks())\n        dispatch(fetchUsers())\n        dispatch(getAssignedUsers(projectId))\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const { project } = nextProps\n        const { statistics } = this.state\n        if(nextProps.userBooks !== this.props.userBooks){\n            // this.setState({})\n            this.setState({availableBooksData: this.props.userBooks})\n        }\n        // if (statistics === null) {\n        //     this.getProjectStatistcs(project)\n        // }\n    }\n\n\n    addUser() {\n        this.setState({ userListing: true })\n    }\n\n    // async assignUserToProject(apiData) {\n    //     try {\n    //         const data = await fetch(apiUrl + 'v1/autographamt/projects/assignments', {\n    //             method: 'POST',\n    //             body: JSON.stringify(apiData)\n    //         })\n    //         const myJson = await data.json()\n    //         this.props.displaySnackBar({\n    //             snackBarMessage: myJson.message,\n    //             snackBarOpen: true,\n    //             snackBarVariant: \"success\"\n    //         })\n    //         this.getAssignedUsers()\n    //     } catch (ex) {\n    //         this.props.displaySnackBar({\n    //             snackBarMessage: \"Server Error\",\n    //             snackBarOpen: true,\n    //             snackBarVariant: \"error\"\n    //         })\n    //     }\n    // }\n\n    selectUser = (userId) => {\n        const { dispatch } = this.props;\n        const projectId = this.props.location.pathname.split('/').pop();\n        const apiData = {\n            projectId: projectId,\n            userId: userId,\n            books: [],\n            // action:'add'\n        }\n        // this.assignUserToProject(apiData)\n        dispatch(assignUserToProject(apiData))\n    }\n\n    closeUserListing = () => {\n        this.setState({ userListing: false })\n    }\n\n    closeBookListing = () => {\n        this.setState({ userId: '', projectId: '', listBooks: false })\n    }\n\n    getUserNames = () => {\n        // const { userData } = this.state\n        const {users} = this.props\n        return users.map(user => {\n            return (\n                <div key={user.userId}>\n                    <ListItem className={this.props.classes.listItem} button onClick={() => this.selectUser(user.userId)} >{user.firstName + \" \" + user.lastName}</ListItem>\n                    <Divider />\n                </div>\n            )\n        })\n    }\n\n    // async deleteUser(apiData) {\n    //     const data = await fetch(apiUrl + 'v1/autographamt/projects/assignments', {\n    //         method: 'DELETE',\n    //         body: JSON.stringify(apiData)\n    //     })\n    //     const response = await data.json()\n    //     if (response.success) {\n    //         this.props.displaySnackBar({\n    //             snackBarMessage: response.message,\n    //             snackBarOpen: true,\n    //             snackBarVariant: \"success\"\n    //         })\n    //         this.getAssignedUsers()\n\n\n    //     } else {\n    //         this.props.displaySnackBar({\n    //             snackBarMessage: response.message,\n    //             snackBarOpen: true,\n    //             snackBarVariant: \"error\"\n    //         })\n\n    //     }\n    // }\n\n    handleDelete = (userId, projectId) => {\n        const {dispatch } =  this.props;\n        const apiData = {\n            userId: userId,\n            projectId: projectId\n        }\n        // this.deleteUser(apiData)\n        dispatch(deleteUser(apiData))\n        // this.getAssignedUsers()\n    }\n\n\n    // async getUserBooks(userId) {\n    //     try {\n    //         const { projectId } = this.props.project\n    //         const data = await fetch(apiUrl + 'v1/sources/projects/books/' + projectId + '/' + userId, {\n    //             method: 'GET',\n    //             headers: {\n    //                 Authorization: 'bearer ' + this.props.accessToken\n    //             }\n    //         })\n    //         const response = await data.json()\n    //         if(\"success\" in response){\n    //             this.props.displaySnackBar({\n    //                 snackBarMessage: response.message,\n    //                 snackBarOpen: true,\n    //                 snackBarVariant: \"error\"\n\n    //             })\n    //         }else{\n    //             this.setState({\n    //                 listBooks: true,\n    //                 availableBooksData: response,\n    //             })\n    //             this.props.displaySnackBar({\n    //                 snackBarMessage: \"Books Fetched\",\n    //                 snackBarOpen: true,\n    //                 snackBarVariant: \"success\"\n    //             })\n    //         }\n    //     }\n    //     catch (ex) {\n    //         this.props.displaySnackBar({\n    //             snackBarMessage: \"Server Error\",\n    //             snackBarOpen: true,\n    //             snackBarVariant: \"error\"\n    //         })\n\n    //     }\n    // }\n\n    handleSelectBooks = (userId, projectId) => {\n        this.setState({ userId, projectId, listBooks: true });\n        const { dispatch } = this.props;\n        // console.log()\n        // this.getUserBooks(userId)\n        dispatch(getUserBooks(userId, projectId));\n    }\n\n    displayAssignedUsers = () => {\n        const { assignedUsers } = this.props\n        return assignedUsers.map(user => {\n            const { userName, email, userId } = user.user\n            return (\n                <TableRow key={userId}>\n                    <TableCell align=\"right\">{userName}</TableCell>\n                    <TableCell align=\"right\">{email}</TableCell>\n                    <TableCell align=\"right\"><Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => this.handleSelectBooks(userId, user.projectId)}>Books</Button></TableCell>\n                    <TableCell align=\"right\"><Button small=\"true\" onClick={() => this.handleDelete(userId, user.projectId)}><DeleteOutlinedIcon /></Button></TableCell>\n                </TableRow>)\n        })\n    }\n\n    handleBooksChecked = (book) => {\n        const { availableBooksData } = this.state\n        const value = availableBooksData[book][\"assigned\"]\n        availableBooksData[book][\"assigned\"] = !value\n        this.setState({ availableBooksData })\n    }\n\n    displayBooks = () => {\n        const { availableBooksData } = this.state\n        const { userBooks } = this.props;\n        // this.setState({availableBooksData: userBooks})\n        \n        const allBooks = Object.keys(availableBooksData)\n        // const allBooks = Object.keys(userBooks)\n        return allBooks.map(book => {\n            return (\n                <Grid item xs={2} className={this.props.classes.checkBox} key={book}>\n                <FormControlLabel \n                    control={\n                        <Checkbox\n                            checked={availableBooksData[book][\"assigned\"]}\n                            onChange={() => this.handleBooksChecked(book)}\n                            value={availableBooksData[book][\"assigned\"]}\n\n                        />\n                    }\n                    label={book}\n                />\n                </Grid>\n            )\n        })\n    }\n\n    assignBooksToUser = () => {\n        const { userId, availableBooksData } = this.state\n        // const { projectId } = this.props.project\n        const { dispatch, location } = this.props;\n        const projectId = location.pathname.split('/').pop()\n\n        const checkedBooks = Object.keys(availableBooksData).filter(book => availableBooksData[book][\"assigned\"] === true)\n\n        const apiData = {\n            projectId: projectId,\n            userId: userId,\n            books: checkedBooks,\n            // action:'add'\n        }\n        // this.assignUserToProject(apiData)\n        dispatch(assignUserToProject(apiData));\n        // this.setState({ userId: '', projectId: '', listBooks: false })\n    }\n\n\n    render() {\n        const { classes, isFetching } = this.props\n        const { userListing, listBooks } = this.state\n        console.log(this.state)\n        console.log('Assign User', this.props);\n        return (\n\n            <div className={classes.root}>\n                <Grid\n                    item xs={12}\n                    className={classes.statisticsPane}\n                >\n                    <StatisticsSummary />\n                </Grid>\n                {/* <div className={classes.toolbar} /> */}\n                <Button\n                    onClick={() => this.addUser()}\n                    variant=\"contained\" color=\"primary\"\n                    style={{\n                        marginLeft: '85%',\n                        marginBottom: '2%',\n                        marginTop: '2%'\n                    }}>\n                    <AddIcon />\n                    Add User</Button>\n                    {\n                        isFetching &&\n                        <CircleLoader />\n                    }\n                <Paper>\n                    {/* <ComponentHeading data={{ classes: classes, text: \"Users List\", styleColor: \"#2a2a2fbd\" }} /> */}\n                    <ComponentHeading data={{ classes: classes, text: \"Users List\", styleColor: \"#fff\", color:'black' }} />\n                    <Divider />\n                    <Table className={classes.table}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"right\">User Name</TableCell>\n                                <TableCell align=\"right\">Email Id</TableCell>\n                                <TableCell align=\"right\">Books Assined</TableCell>\n                                <TableCell align=\"right\">Remove User</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.displayAssignedUsers()}\n                        </TableBody>\n                    </Table>\n                </Paper>\n                {/* <PopUpMessages /> */}\n                <Dialog\n                    open={userListing}\n                    onClose={this.closeUserListing}\n                    aria-labelledby=\"form-dialog-title\"\n                >\n                    {/* <ComponentHeading data={{ classes: classes, text: \"Add User\", styleColor: '#2a2a2fbd' }} /> */}\n                    <ComponentHeading data={{ classes: classes, text: \"Add User\", styleColor: '#2e639a' }} />\n                    <DialogTitle id=\"form-dialog-title\"> </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            <Typography variant=\"body1\">Select User</Typography>\n                    </DialogContentText>\n                        <List className={classes.gridSize}>\n                            {this.getUserNames()}\n                        </List>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.closeUserListing} variant=\"contained\" color=\"secondary\">\n                            Close\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n                <Dialog\n                    open={listBooks}\n                >\n                    <DialogContent>\n                        <Grid container item spacing={1} className={classes.bookCard}>\n                        {this.displayBooks()}\n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.closeBookListing} variant=\"contained\" color=\"secondary\">Close</Button>\n                        <Button onClick={this.assignBooksToUser} variant=\"contained\" color=\"primary\" >Assign</Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        users: state.user.users,\n        project: state.sources.project,\n        accessToken: state.auth.accessToken,\n        assignedUsers: state.user.assignedUsers,\n        userBooks: state.user.userBooks,\n        isFetching: state.user.isFetching\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n})\n\n// export default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(AssignUser))\nexport default compose(\n    withStyles(styles),\n    connect(mapStateToProps, mapDispatchToProps)\n )(withRouter(AssignUser))","import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { Typography, CardContent, Paper, createMuiTheme, MuiThemeProvider, Button } from '@material-ui/core';\nimport apiUrl from '../GlobalUrl';\nimport { Card } from '@material-ui/core';\nimport { CardHeader } from '@material-ui/core';\nimport { displaySnackBar, selectProject } from '../../store/actions/sourceActions'\nimport { fetchUserProjects } from '../../store/actions/projectActions';\nimport CircleLoader from '../loaders/CircleLoader';\nimport { connect } from 'react-redux'\nimport PopUpMessages from '../PopUpMessages';\nimport MUIDataTable from \"mui-datatables\";\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\n// import CreateProject from './CreateProject';\nimport { Redirect, Link } from 'react-router-dom';\nimport compose from 'recompose/compose';\nimport { withRouter } from 'react-router-dom';\nimport BooksDownloadable from '../BooksDownloadable';\n\nimport swal from 'sweetalert';\n\nconst getMuiTheme = () => createMuiTheme({\n    overrides: {\n      MUIDataTable: {\n        root: {\n        },\n        paper: {\n          boxShadow: \"none\",\n        }\n      },\n      MUIDataTableBodyRow: {\n        root: {\n          '&:nth-child(odd)': { \n            backgroundColor: '#eaeaea'\n          }\n        }\n      },\n      MUIDataTableBodyCell: {\n      }\n    }\n  })\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        padding: theme.spacing(2),\n        // backgroundColor: '#ededf4',\n        // minHeight: '100%'\n    },\n    cursorPointer: {\n      cursor: 'pointer',\n      backgroundColor: '#fff',\n      '&:hover': {\n          background: '#ededf4',\n      },\n    },\n    cardHover: {\n        backgroundColor: '#100f0ffa',\n        '&:hover': {\n            background: \"#f00\",\n        },\n    },\n    fab: {\n        position: 'fixed',\n        bottom: '16px',\n        right: '16px',\n    }\n});\n\nclass MyProjects extends Component {\n    \n    state = {\n        redirect: null,\n        open: false,\n        booksPane: false,\n        project: {},\n        columns: [\n            {\n                name: 'id',\n                options: {    \n                    display: false,\n                    filter: false\n                }\n            },\n            {\n                name: 'Project Name',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Project Code',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Organisation',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Source',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Books Assigned',\n                options: {\n                    filter: true\n                }\n            },\n            {\n                name: 'Download',\n                options: {\n                    filter: true,\n                    customBodyRender: (value, row) => {\n                        return <Button variant=\"contained\" size=\"small\" color=\"primary\" onClick={() => this.handleDownload(value)}>Download drafts</Button>\n                    }\n                }\n            },\n            {\n                name: 'Translate',\n                options: {\n                    filter: true,\n                    customBodyRender: (value) => {\n                        return <Link to={`/app/translations/projects/${value}`}>Translate</Link>\n                    }\n                }\n            }\n        ]\n    }\n\n    handleDownload = (projectId) => {\n        var project = this.props.userProjects.filter(item => item.projectId === projectId)\n        if(project.length > 0){\n            this.setState({\n                project: project[0],\n                booksPane: true\n            })\n        } else {\n            swal({\n                title: 'Download drafts',\n                text: 'No downloadable books available ',\n                icon: 'error'\n            });\n        }\n    }\n\n    updateState = (data) => {\n        this.setState(data);\n    }\n\n    componentDidMount() {\n        const { dispatch } = this.props;\n        dispatch(fetchUserProjects());\n    }\n    render () {\n        const { classes, userProjects, isFetching } = this.props;\n        const { columns, open } = this.state;\n        const data = userProjects.map(project => {\n            return [\n                project.projectId, \n                project.projectName.split('|')[0], \n                project.projectName.split('|')[1], \n                project.organisationName, \n                project.version.name,\n                project.books.length,\n                project.projectId, \n                project.projectId, \n            ]\n        });\n        const options = {\n            selectableRows: false,\n            // onRowClick: rowData => this.setState({redirect: rowData[0]})\n        };\n        console.log('my projects', this.props)\n        const { redirect, project, booksPane } = this.state;\n        if(redirect) {\n            return <Redirect to={`/app/translations/projects/${redirect}`} />\n        }\n        return (\n            <div className={classes.root}>\n                { isFetching && <CircleLoader />}\n                <MuiThemeProvider theme={getMuiTheme()}>\n                    <BooksDownloadable isFetching={isFetching} updateState={this.updateState} project={project} booksPane={booksPane} />\n                <MUIDataTable \n                    title={\"My Projects\"} \n                    data={data} \n                    columns={columns} \n                    options={options} \n                />\n                </MuiThemeProvider>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    projects: state.project.projects,\n    isFetching: state.project.isFetching,\n    userProjects: state.project.userProjects\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n})\n\nexport default compose(\n    withStyles(styles),\n    connect(mapStateToProps, mapDispatchToProps)\n )(withRouter(MyProjects))","import React from 'react';\nimport jwt_decode from 'jwt-decode';\n// import PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Grid from '@material-ui/core/Grid';\nimport Header from '../Header';\nimport { Component } from 'react';\nimport Drawer from './Drawer';\nimport { Redirect, Route, Switch, BrowserRouter } from 'react-router-dom';\n\n// import HomePage from '../HomePage'\nimport DownloadDraft from '../DownloadDraft';\nimport ViewSources from '../ViewSources';\nimport UserDashboard from '../Users/UserDashboard';\nimport ListProjects from '../Administration/ListProjects';\nimport ListOrganisations from '../Administration/ListOrganisations';\nimport HomePage from '../Translations/HomePage';\nimport ListUsers from '../Administration/ListUsers';\nimport { connect } from 'react-redux';\nimport { validateAccessToken } from '../../store/actions/authActions';\nimport AssignUser from '../Assignments/AssignUser';\nimport MyProjects from '../Translations/MyProjects';\nimport CreateOrganisations from '../Assignments/CreateOrganisations';\n// import ProjectStatistics from '../Reports/ProjectStatistics'\n\nexport const PrivateRoute = ({ component: Component, location, ...rest }) => (\n    <Route\n        // {...rest}\n        render={props => localStorage.getItem('accessToken')\n            ? (\n                <Component {...props} {...rest} />\n            )\n            : (<Redirect to={{\n                pathname: \"/\",\n                state: { from: props.location }\n            }}\n            />\n            )\n        }\n    />\n)\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        flexGrow: 1,\n        // backgroundColor: '#ededf4',\n        backgroundColor: '#f2f2f2ab'\n    },\n    exp: {\n        backgroundColor: '#100f0ffa',\n        '&:hover': {\n            background: \"#f00\",\n        },\n        paddingLeft: '40px'\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n    },\n    drawer: {\n        // width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        // width: '100%',\n        zIndex: -1,\n        backgroundColor: '#262f3d'\n    },\n    content: {\n        // flexGrow: 1,\n        minHeight: '100vh'\n        // padding: theme.spacing(1),\n    },\n    toolbar: theme.mixins.toolbar,\n});\n\nclass Wrapper extends Component {\n    state = {}\n    componentDidMount() {\n        const { dispatch } = this.props;\n        dispatch(validateAccessToken());\n    }\n\n    render() {\n        const { classes } = this.props;\n        console.log('Wrapper', this.props);\n        return (\n            <BrowserRouter>\n            {/* <div className={classes.root}> */}\n                <Grid container>\n                {/* <CssBaseline /> */}\n                {/* <AppBar position=\"fixed\" className={classes.appBar}> */}\n                    {/* <Grid item xs={12}> */}\n                    {/* <div></div> */}\n                    {/* </Grid> */}\n                {/* </AppBar> */}\n                <Header />\n                <Grid item xs={2} style={{top: '0', position: 'fixed', paddingTop: '80px', width: '100%', height: '100%', backgroundColor: 'black'}}>\n                    <Drawer classes={classes}  />\n                </Grid>\n                {/* <Grid item xs={2}></Grid> */}\n                <Grid item xs={10} style={{  width: '100%', zIndex: -1, position:'absolute', top:'85px', right:0}}>\n                    \n                \n                {/* <main className={classes.content}> */}\n                    {/* <div className={classes.toolbar} /> */}\n                    \n                        <Switch>\n                            {/* <Route path=\"/signin\" component={() => <LoginPage />} /> */}\n                            {/* <Route path=\"/signup\" component={() => <SignUp />} /> */}\n                            {/* <Route exact path=\"/app\" component={() => <HomePage />} /> */}\n                            <PrivateRoute exact path=\"/user/dashboard\" component={() => <UserDashboard />} />\n                            {/* <PrivateRoute path=\"/dashboard\" component={() => <AdminPage />} /> */}\n                            <PrivateRoute path=\"/download\" component={() => <DownloadDraft />} />\n                            <PrivateRoute path=\"/app/viewsources\" component={() => <ViewSources />} />\n                            <PrivateRoute exact path=\"/app/projects\" component={() => <ListProjects />} />\n                            <PrivateRoute path=\"/app/users\" component={() => <ListUsers />} />\n                            <PrivateRoute exact path=\"/app/organisations\" component={() => <ListOrganisations />} />\n                            <PrivateRoute path=\"/app/organisations/create\" component={() => <CreateOrganisations />} />\n                            <PrivateRoute path=\"/app/projects/:id\" location={this.props.location} component={() => <AssignUser />} />\n                            <PrivateRoute path=\"/app/translations/projects/:id\" component={() => <HomePage />} />\n                            <PrivateRoute exact path=\"/app/translations/projects\" component={() => <MyProjects />} />\n                            <PrivateRoute exact path=\"/app/translations/download\" component={() => <DownloadDraft />} />\n                            <PrivateRoute exact path=\"/app/translations/sources\" component={() => <ViewSources />} />\n                        </Switch>\n                    {/* </BrowserRouter> */}\n                {/* </main> */}\n                </Grid>\n            </Grid>\n            {/* </div> */}\n            </BrowserRouter>\n        );\n    }\n}\n\n// Wrapper.propTypes = {\n//     classes: PropTypes.object.isRequired,\n// };\n\nconst mapStateToProps = state => ({\n    current_user: state.auth.current_user\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Wrapper))","import React, { Component } from 'react';\nimport {\n    Grid,\n    Typography,\n    makeStyles,\n    Card,\n    CardActionArea,\n    CardContent,\n    List,\n    ListItem,\n    ListItemText,\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails\n} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Redirect } from 'react-router-dom';\nimport Header from './Header';\nimport { withStyles } from '@material-ui/styles';\n\nconst styles = makeStyles(theme => ({\n  homePage: {\n      marginTop: '85px',\n      width: '100%',\n      margin:0\n  },\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  subheader: {\n    fontWeight: \"bold\",\n  }\n}));\n\nclass HomePage extends Component {\n    state = {}\n    render() {\n        const { redirect } = this.state;\n        if (redirect) {\n            return <Redirect to='/dashboard' />\n        }\n        const { classes } = this.props\n        return (\n          <React.Fragment>\n            <Header />\n            <Grid container spacing={3} >\n              <Grid item xs={12}className={classes.homePage}>\n                <Card className={classes.card} style={{marginTop: '80px'}}>\n                  <CardActionArea>\n                    <CardContent>\n                      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        Autographa Machine Translation\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        AutographaMT is a web-based application that aims to support automatic translation of the Bible into languages that have no available digital text useful for training conventional machine translation models. AutographaMT attempts to generate a machine translations of the source text employing minimal effort of human translators.\n                      </Typography>\n                    </CardContent>\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              <Grid item xs={6}>\n                <Card className={classes.card}>\n                  <CardActionArea>\n                    <CardContent>\n                      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        Workflow\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        In its initial phase, it employs a simple strategy that is able to achieve reasonable success with little human translation effort. The process that is followed to achieve this is:\n                           <List component=\"nav\" aria-label=\"main mailbox folders\">\n                              <ListItem>\n                                <ListItemText>\n                                <span style={{ fontWeight: 'bold'}} >Identification/Initialization:</span> A suitable source language (usually a gateway language) in which a Bible translation already exists and available is selected. Ideally, the selected source language would have similar syntanctic structure with the target language. This is then uploaded into the system.\n                                </ListItemText>\n                              </ListItem>\n                              <ListItem>\n                                <ListItemText>\n                                  <span style={{ fontWeight: 'bold'}} >Extraction:</span> All the unique occurances of tokens (also phrases) are extracted and listed. This includes inflected forms of words.\n                                </ListItemText>\n                              </ListItem>\n                              <ListItem li>\n                                <ListItemText>\n                                  <span style={{ fontWeight: 'bold'}} >Human Translation:</span> A qualified translator then translates all the tokens extracted in step 2.\n                                </ListItemText>\n                              </ListItem>\n                              <ListItem li>\n                                <ListItemText>\n                                  <span style={{ fontWeight: 'bold'}} >Machine Generation:</span> The system then generates a draft translation (called draft 0) of the source text by way of simple replacements.\n                                </ListItemText>\n                              </ListItem>\n                            </List>\n                          All these steps are facilitated within AutographaMT.                        \n                      </Typography>\n                    </CardContent>\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              <Grid item xs={6}>\n                <Card className={classes.card}>\n                  <CardActionArea>\n                    <CardContent>\n                      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        Features\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\" component=\"li\">\n                        User authentication and role management\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\" component=\"li\">\n                        Unique token and phrase extraction logic\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\" component=\"li\">\n                        Translation input interface\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\" component=\"li\">\n                        Just-in-time resources: concordance, translationWords, translationNotes, Greek/Hebrew word information\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\" component=\"li\">\n                        Basic translation progress status\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\" component=\"li\">\n                        Ability to save multiple sense for the same token/phrase\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\" component=\"li\">\n                        One-click generation of draft translation in target language\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\" component=\"li\">\n                        Free and open-source\n                      </Typography>\n                    </CardContent>\n                  </CardActionArea>\n                </Card>\n              </Grid>\n              <Grid item xs={12}>\n                <Card className={classes.card}>\n                  <CardActionArea>\n                    <CardContent>\n                      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        FAQ\n                      </Typography>\n                      <ExpansionPanel>\n                        <ExpansionPanelSummary\n                          expandIcon={<ExpandMoreIcon />}\n                          aria-controls=\"panel1a-content\"\n                          id=\"panel1a-header\"\n                        >\n                          <Typography className={classes.heading}>Who built AutographaMT? </Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                          <Typography>\n                            AutographaMT is built by a team of developers in India and funded by <code>Friends of Agape</code>. The work started in 2017 and the original version was called <a href='https://github.com/friendsofagape/mt2414' >MT2414</a>. The application has since been re-written for improving usability and better maintainability and the client application lives in this repository. Currently there are 4 full-time developers and 1 part-time developer who works on this project focussing on different aspects of the system.\n                          </Typography>\n                        </ExpansionPanelDetails>\n                      </ExpansionPanel>\n                      <ExpansionPanel>\n                        <ExpansionPanelSummary\n                          expandIcon={<ExpandMoreIcon />}\n                          aria-controls=\"panel2a-content\"\n                          id=\"panel2a-header\"\n                        >\n                          <Typography className={classes.heading}>What has been achieved using AutographaMT?</Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                          <Typography>\n                            The application was successfully used to generate the starting drafts for the onging translation of 12 Old Testament translation projects.\n                          </Typography>\n                        </ExpansionPanelDetails>\n                      </ExpansionPanel>\n                      <ExpansionPanel>\n                        <ExpansionPanelSummary\n                          expandIcon={<ExpandMoreIcon />}\n                          aria-controls=\"panel3a-content\"\n                          id=\"panel3a-header\"\n                        >\n                          <Typography className={classes.heading}>Can I use AutographaMT? </Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                          <Typography>\n                            Everyone is encouraged to use AutographaMT. In fact, the application is designed to handle multiple organizations and individuals to be able to work simultaneously. To start simply sign-up at autographamt.com. The (quick) initial step is to create and setup your organization on the website. If you have any questions, please do not hesitate to create an issue or mail us at <a href='mailto:autographa.support@bridgeconn.com' >autographa.support@bridgeconn.com</a>\n                          </Typography>\n                        </ExpansionPanelDetails>\n                      </ExpansionPanel>\n\n                    </CardContent>\n                  </CardActionArea>\n                </Card>\n              </Grid>\n            </Grid>\n          </React.Fragment>\n        )\n    }\n}\n\n\nexport default withStyles(styles)(HomePage);","import React, { Component } from 'react';\nimport {\n    Grid,\n    TextField,\n    Button,\n    FormControlLabel,\n    Checkbox,\n    Link,\n    Typography,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    Slide\n} from '@material-ui/core';\nimport Container from '@material-ui/core/Container';\nimport { Redirect } from 'react-router-dom';\nimport Header from './Header';\nimport apiUrl from './GlobalUrl';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst styles = theme => ({\n    loginPage: {\n      marginTop: '120px'\n    },\n    form: {\n      // backgroundColor:'blue',\n      padding: '0px 5px'\n    },\n});\n\nfunction Transition(props) {\n    return <Slide direction=\"up\" {...props} />;\n}\n\n\nclass SignUp extends Component {\n    state = {\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n        message: '',\n        redirect: false,\n        verificationDialogOpen: false,\n    }\n\n\n\n    async registerUser() {\n        var formData = new FormData();\n        var apiData = {\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            email: this.state.email,\n            password: this.state.password\n        }\n        for (var name in apiData) {\n            formData.append(name, apiData[name])\n        }\n\n        const data = await fetch(apiUrl +  'v1/registrations', {\n            method: \"POST\",\n            body: formData\n        })\n        const myJson = await data.json()\n\n        if (myJson.success) {\n            this.setState({ message: myJson.message, verificationDialogOpen: true })\n        } else {\n            alert(myJson.message)\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.registerUser()\n    }\n\n    handleOk = () => {\n        this.setState({ redirect: true })\n    }\n\n    handleClose = () => {\n        this.setState({ verificationDialogOpen: false })\n    }\n\n    render() {\n        const { redirect } = this.state\n        if (redirect) {\n            return <Redirect to='/signin' />\n        }\n        const { classes } = this.props\n        return (\n            <Grid container>\n            <Header />\n            <Container component=\"main\" maxWidth=\"xs\" className={classes.loginPage}>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign Up\n                </Typography>\n                <form className={classes.form} onSubmit={this.handleSubmit}>\n                    <Grid container spacing={1}>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"firstName\"\n                                label=\"First Name\"\n                                name=\"firstName\"\n                                autoComplete=\"fname\"\n                                autoFocus\n                                onChange={(e) => this.setState({ firstName: e.target.value })}\n                            />\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"lastName\"\n                                label=\"Last Name\"\n                                name=\"lastName\"\n                                autoComplete=\"lname\"\n                                autoFocus\n                                onChange={(e) => this.setState({ lastName: e.target.value })}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            type=\"email\"\n                            label=\"Email Address\"\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            autoFocus\n                            onChange={(e) => this.setState({ email: e.target.value })}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"password\"\n                            label=\"Password\"\n                            name=\"password\"\n                            type=\"password\"\n                            autoComplete=\"current-password\"\n                            autoFocus\n                            onChange={(e) => this.setState({ password: e.target.value })}\n                        />\n                    </Grid>\n                    <FormControlLabel\n                        control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\n                        label=\"I want to recieve promotional emails\"\n                    />\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                    >\n                        Sign Up\n                        </Button>\n                    <Grid container style={{ marginTop: \"7px\" }}>\n                        <Grid container justify=\"flex-end\">\n                            <Link href=\"/signin\" variant=\"body2\">\n                                {\"Already have an account? Sign in\"}\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </form>\n                <Dialog\n                    open={this.state.verificationDialogOpen}\n                    TransitionComponent={Transition}\n                    keepMounted\n                    onClose={this.handleClose}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\"\n                >\n                    <DialogTitle id=\"alert-dialog-slide-title\">\n                        {\"Verification Mail Sent\"}\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id=\"alert-dialog-slide-description\">\n                            An Email with a verification link has been sent to your mail Id. Please\n                            click on the link in your email to activate your account\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleOk} color=\"primary\">\n                            OK\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Container>\n            </Grid>\n        )\n    }\n}\n\nexport default  withStyles(styles)(SignUp)","import React, { Component } from 'react';\nimport {\n    Grid,\n    TextField,\n    Button,\n    FormControlLabel,\n    Checkbox,\n    Link,\n    Typography,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle\n} from '@material-ui/core';\nimport Container from '@material-ui/core/Container';\nimport { Redirect } from 'react-router-dom';\nimport Header from './Header';\nimport jwt_decode from 'jwt-decode';\nimport apiUrl from './GlobalUrl';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/styles';\nimport { setAccessToken } from '../store/actions/authActions';\nimport { displaySnackBar } from '../store/actions/sourceActions';\nimport PopUpMessages from './PopUpMessages';\n\nconst styles = theme => ({\n    loginPage: {\n        marginTop: '120px'\n    },\n    forgot: {\n        cursor: 'pointer',\n    },\n});\n\nclass LoginPage extends Component {\n    state = {\n        message: '',\n        email: '',\n        password: '',\n        forgotPasswordDailogOpen: false,\n        verificationCodeDialogOpen: false,\n        dialogEmail: '',\n        verificationCode: '',\n        verifiedSuccess: false,\n        newPassword: false,\n        redirect: false\n    }\n\n    async authenticate() {\n        var formData = new FormData();\n        var apiData = {\n            email: this.state.email,\n            password: this.state.password\n        }\n        for (var name in apiData) {\n            formData.append(name, apiData[name])\n        }\n        const data = await fetch(apiUrl + 'v1/auth', {\n            method: \"POST\",\n            body: formData\n        })\n        const myJson = await data.json()\n        if ('accessToken' in myJson) {\n            this.setState({ redirect: true })\n            await localStorage.setItem('accessToken', myJson.accessToken)\n            window.location = '/app/translations/projects';\n            this.props.setAccessToken({\n                accessToken: myJson.accessToken\n            })\n        } else {\n            // alert(myJson.message)\n            this.props.displaySnackBar({\n                snackBarMessage: myJson.message,\n                snackBarOpen: true,\n                snackBarVariant: (myJson.success) ? \"success\" : \"error\"\n\n            })\n        }\n    }\n\n    handleLoginSubmit = (e) => {\n        e.preventDefault();\n        this.authenticate()\n    }\n\n    // componentDidMount() {\n    //     let decoded;\n    //     var accessToken = localStorage.getItem('access_token')\n    //     if (accessToken) {\n    //         decoded = jwt_decode(accessToken)\n    //         let currentDate = new Date().getTime()\n    //         let expiry = decoded.exp * 1000\n    //         var hours = (expiry - currentDate) / 36e5\n    //         if (hours > 0) {\n    //             console.log(\"logged in\")\n    //             this.setState({ redirect: true })\n    //         } else {\n    //             console.log(\"logged out\")\n    //         }\n    //     }\n    // }\n\n    handleClose = () => {\n        this.setState({ forgotPasswordDailogOpen: false, verificationCodeDialogOpen: false, verifiedSuccess: false })\n    }\n\n    handleOpen = () => {\n        this.setState({ forgotPasswordDailogOpen: true })\n    }\n\n    async forgotPassword() {\n        var formData = new FormData();\n        var apiData = {\n            email: this.state.dialogEmail\n        }\n        for (var name in apiData) {\n            formData.append(name, apiData[name])\n        }\n        const data = await fetch(apiUrl + 'v1/resetpassword', {\n            method: 'POST',\n            body: formData\n        })\n        const myJson = await data.json()\n        if (myJson.success) {\n            this.setState({ message: myJson.message, forgotPasswordDailogOpen: false, verificationCodeDialogOpen: true })\n        } else {\n            // alert(myJson.message)\n            this.props.displaySnackBar({\n                snackBarMessage: myJson.message,\n                snackBarOpen: true,\n                snackBarVariant: (myJson.success) ? \"success\" : \"error\"\n            })\n        }\n    }\n\n    handleSend = (e) => {\n        e.preventDefault();\n        this.forgotPassword();\n    }\n\n    async resetPassword() {\n        var formData = new FormData();\n        var apiData = {\n            temporaryPassword: this.state.verificationCode,\n            password: this.state.newPassword\n        }\n        for (var name in apiData) {\n            formData.append(name, apiData[name])\n        }\n        const reset = await fetch(apiUrl + 'v1/forgotpassword', {\n            method: 'POST',\n            body: formData\n        });\n        const myJson = await reset.json()\n        if (myJson.success) {\n            this.setState({ verificationCodeDialogOpen: false, verifiedSuccess: true })\n        }\n    }\n\n    handleVerificationCode = (e) => {\n        e.preventDefault();\n        this.resetPassword()\n    }\n\n    handleOk = () => {\n        this.setState({ verifiedSuccess: false })\n    }\n\n    render() {\n        const { redirect } = this.state;\n        if (redirect) {\n            return <Redirect to='/app' />\n        }\n        //cons\n        const { classes } = this.props\n        return (\n            <Grid container>\n                <Header />\n                <PopUpMessages />\n                <Container component=\"main\" maxWidth=\"xs\" className={classes.loginPage}>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Sign in\n                </Typography>\n                    <form className={classes.form} onSubmit={this.handleLoginSubmit}>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            type=\"email\"\n                            label=\"Email Address\"\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            onChange={(e) => this.setState({ email: e.target.value })}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"password\"\n                            label=\"Password\"\n                            name=\"password\"\n                            type=\"password\"\n                            autoComplete=\"current-password\"\n                            autoFocus\n                            onChange={(e) => this.setState({ password: e.target.value })}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox value=\"remember\" color=\"primary\" />}\n                            label=\"Remember me\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >\n                            Sign In\n                </Button>\n                    </form>\n                    <Grid container style={{ marginTop: \"7px\" }}>\n                        <Grid item xs>\n                            <Link variant=\"body2\" onClick={this.handleOpen} className={classes.forgot}>\n                                Forgot password?\n                        </Link>\n                        </Grid>\n                        <Grid item>\n                            <Link href=\"/signup\" variant=\"body2\">\n                                {\"Don't have an account? Sign Up\"}\n                            </Link>\n                        </Grid>\n                    </Grid>\n                    <Dialog\n                        open={this.state.forgotPasswordDailogOpen}\n                        onClose={this.handleClose}\n                        aria-labelledby=\"form-dialog-title\"\n                    >\n                        <DialogTitle id=\"form-dialog-title\">Forgot Password</DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                Enter your registered email id. An Email with a verification code\n                                will be sent to this email id.\n                        </DialogContentText>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"name\"\n                                label=\"Email Address\"\n                                type=\"email\"\n                                fullWidth\n                                onChange={(e) => this.setState({ dialogEmail: e.target.value })}\n                            />\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={this.handleClose} color=\"primary\">\n                                Close\n                        </Button>\n                            <Button onClick={this.handleSend} color=\"primary\">\n                                Send\n                        </Button>\n                        </DialogActions>\n                    </Dialog>\n                    <Dialog\n                        open={this.state.verificationCodeDialogOpen}\n                        aria-labelledby=\"form-dialog-title\"\n                    >\n                        <DialogTitle id=\"form-dialog-title\">Enter Verification Code</DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                {this.state.message}\n                                <br />\n                                Enter the code recieved.\n                        </DialogContentText>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"name\"\n                                label=\"Verification Code\"\n                                fullWidth\n                                onChange={(e) => this.setState({ verificationCode: e.target.value })}\n                            />\n                            <DialogContentText>\n                                <br />\n                                Enter the your new password.\n                        </DialogContentText>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"newpassword\"\n                                type=\"password\"\n                                label=\"Enter new password\"\n                                fullWidth\n                                onChange={(e) => this.setState({ newPassword: e.target.value })}\n                            />\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={this.handleVerificationCode} color=\"primary\">\n                                Submit\n                        </Button>\n                        </DialogActions>\n                    </Dialog>\n                    <Dialog\n                        open={this.state.verifiedSuccess}\n                        aria-labelledby=\"form-dialog-title\"\n                        onClose={this.handleClose}\n                    >\n                        <DialogTitle id=\"form-dialog-title\">Successful</DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                <br />\n                                Your Password has been changed. Login in with the new password\n                        </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={this.handleOk} color=\"primary\">\n                                OK\n                        </Button>\n                        </DialogActions>\n                    </Dialog>\n                </Container>\n            </Grid>\n        )\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setAccessToken: (token) => dispatch(setAccessToken(token)),\n        displaySnackBar: (popUp) => dispatch(displaySnackBar(popUp))\n    }\n}\nexport default connect(null, mapDispatchToProps)(withStyles(styles)(LoginPage));","import React from 'react';\nimport './components/css/style.css';\n// import Routes from './components/Routes';\nimport Wrapper from './components/Wrapper';\nimport HomePage from './components/HomePage';\nimport SignUp from './components/SignUp';\nimport LoginPage from './components/LoginPage';\nimport { Redirect, Route, Switch, BrowserRouter } from 'react-router-dom';\n\nfunction App(props) {\n  // const { classes } = props;\n  console.log('Reached App page')\n  return (\n      // <Grid container className={classes.root}>\n          // <Routes />\n          <BrowserRouter>\n            <Switch>\n              <Route exact path=\"/signin\" component={() => <LoginPage />} /> */}\n              <Route path=\"/signup\" component={() => <SignUp />} />\n              <Route exact path=\"/\" component={() => <HomePage />} />\n              <Route path=\"/app\" component={() => <Wrapper />} />\n            </Switch>\n          </BrowserRouter>\n          \n      // </Grid>\n  );\n}\n\n// App.propTypes = {\n//   classes: PropTypes.object.isRequired,\n// };\n\n// export default withStyles(styles)(App);\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SET_BIBLE_LANGUAGES, SET_ALL_LANGUAGES, SET_IS_FETCHING, CLEAR_STATE, SET_SOURCE_BOOKS, SET_UPLOAD_ERROR_BOOKS, COMPLETED_UPLOAD } from '../actions/actionConstants';\nconst initState = {\n    bibleLanguages: [],\n    allLanguages: [],\n    isFetching: false,\n    sourceBooks: [],\n    uploadErrorBooks: [],\n    completedUpload: true\n}\n\nconst sourceReducer = (state = initState, action) => {\n    console.log(action)\n    switch (action.type) {\n        case SET_BIBLE_LANGUAGES:\n            return {\n                ...state,\n                bibleLanguages: action.bibleLanguages\n            }\n        case SET_ALL_LANGUAGES:\n            return {\n                ...state,\n                allLanguages: action.allLanguages\n            }\n        case SET_UPLOAD_ERROR_BOOKS:\n            return {\n                ...state,\n                uploadErrorBooks: [...state.uploadErrorBooks, action.book]\n            }\n        case SET_SOURCE_BOOKS:\n            return {\n                ...state,\n                sourceBooks: action.books\n            }\n        case COMPLETED_UPLOAD:\n            return {\n                ...state,\n                completedUpload: action.status\n            }\n        case SET_IS_FETCHING:\n            return {\n                ...state,\n                isFetching: action.status\n            }\n        case CLEAR_STATE:\n            return {\n                ...initState\n            }\n        case 'GET_SOURCES':\n            return {\n                ...state,\n                sourceId: action.source.sourceId,\n                book: action.source.book,\n                targetLanguage: action.source.targetLanguage,\n                targetLanguageId: action.source.targetLanguageId\n            }\n        case 'SELECT_PROJECT':\n            return {\n                ...state,\n                project: action.project.project\n            }\n        case 'SELECT_BOOK':\n            return {\n                ...state,\n                book: action.project.book,\n                token:null,\n            }\n        case 'SELECTED_BOOKS':\n            return {\n                ...state,\n                selectedBooks: action.selection.selectedBooks\n            }\n        case 'SELECT_TOKEN':\n            return {\n                ...state,\n                token: action.token.token,\n                reference: null,\n                verseNum: null\n            }\n        case 'GET_SOURCES_ERROR':\n            return {\n                ...state,\n                sourceError: 'Source Fetch Failed'\n            }\n        case 'GET_TOKEN':\n            return {\n                ...state,\n                token: action.token.token,\n                reference: null,\n                verseNum: null\n            }\n        case 'DISPLAY_POP_UP':\n            return {\n                ...state,\n                snackBarMessage: action.popUp.snackBarMessage,\n                snackBarOpen: action.popUp.snackBarOpen,\n                snackBarVariant: action.popUp.snackBarVariant\n            }\n        case 'SAVE_REFERENCE':\n            return {\n                ...state,\n                reference: action.reference.reference,\n                verseNum: action.reference.verseNum\n            }\n        default:\n            return state\n    }\n}\n\nexport default sourceReducer","import { SET_CURRENT_USER, CLEAR_STATE } from '../actions/actionConstants';\n\nconst initState = {\n    accessToken: null,\n    firstName: null,\n    lastName: null,\n    email: null,\n    role: null,\n    current_user: {}\n}\n\nconst authReducer = (state=initState, action) => {\n    switch(action.type){\n        case 'SET_ACCESS_TOKEN':\n            return {\n                ...state,\n                accessToken: action.token.accessToken\n            }\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                current_user: action.current_user\n            }\n        case CLEAR_STATE:\n            return {\n                ...initState\n            }\n        default:\n            return state\n    }\n}\n\nexport default authReducer;","const initState = {\n    uploadPane: false,\n    booksPane: false\n}\n\nconst dialogReducer = (state=initState, action) => {\n    switch(action.type){\n        case 'TOGGLE_UPLOAD_PANE':\n            return {\n                ...state,\n                uploadPane: action.status.uploadPane\n            }\n        default:\n            return state\n        case 'TOGGLE_BOOKS_CHECKBOX':\n            return {\n                ...state,\n                booksPane: action.status.booksPane\n            }\n    }\n}\n\n\nexport default dialogReducer;","import { \n    SET_PROJECTS, \n    SET_IS_FETCHING, \n    SET_USER_PROJECTS, \n    SET_SELECTED_BOOK, \n    SET_TOKEN_LIST,\n    SET_SELECTED_PROJECT,\n    SET_SELECTED_TOKEN,\n    SET_CONCORDANCE,\n    SET_REFERENCE_NUMBER,\n    CLEAR_STATE,\n    SET_TRANSLATED_WORD\n} from '../actions/actionConstants';\n\nconst initialState = {\n    projects: [],\n    isFetching: false,\n    userProjects: [],\n    selectedBook: '',\n    tokenList: [],\n    selectedProject: {},\n    selectedToken: '',\n    concordance: {},\n    reference: '',\n    verseNum: {},\n    translation: '',\n    senses: []\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_PROJECTS:\n            return {\n                ...state,\n                projects: action.projects\n            };\n        case SET_IS_FETCHING:\n            return {\n                ...state,\n                isFetching: action.status\n            }\n        case SET_USER_PROJECTS:\n            return {\n                ...state,\n                userProjects: action.projects\n            }\n        case SET_SELECTED_BOOK:\n            return {\n                ...state,\n                selectedBook: action.book\n            }\n        case SET_TOKEN_LIST:\n            return {\n                ...state,\n                tokenList: action.tokens\n            }\n        case SET_SELECTED_PROJECT:\n            return {\n                ...state,\n                selectedProject: action.project\n            }\n        case SET_SELECTED_TOKEN:\n            return {\n                ...state,\n                selectedToken: action.token,\n                concordance: {},\n                reference: '',\n                verseNum: {},\n                translation: '',\n                senses: []\n            }\n        case SET_CONCORDANCE:\n            return {\n                ...state,\n                concordance: action.concordance\n            }\n        case SET_REFERENCE_NUMBER:\n            return {\n                ...state,\n                reference: action.reference.reference,\n                verseNum: action.reference.verseNum\n            }\n        case SET_TRANSLATED_WORD:\n            console.log('action', action)\n            return {\n                ...state,\n                translation: action.translation.translation,\n                senses: action.translation.senses\n            }\n        case CLEAR_STATE:\n            return {\n                ...initialState\n            }\n        default:\n            return {\n                ...state\n            };\n    };\n}\n\nexport default reducer;","import { SET_ORGANISATIONS, SET_IS_FETCHING, CLEAR_STATE } from '../actions/actionConstants';\n\nconst initialState = {\n    organisations: [],\n    isFetching: false\n};\n\nconst reducer = (state=initialState, action) => {\n    switch(action.type){\n        case SET_ORGANISATIONS:\n            return {\n                ...state,\n                organisations: action.organisations\n            };\n        case SET_IS_FETCHING:\n            return {\n                ...state,\n                isFetching: action.status\n            }\n        case CLEAR_STATE:\n            return {\n                ...initialState\n            }\n        default:\n            return {\n                ...state\n            };\n    };\n}\n\nexport default reducer;","import { SET_USERS, SET_IS_FETCHING, SET_ASSIGNED_USERS, SET_USER_BOOKS, CLEAR_STATE } from '../actions/actionConstants';\n\nconst initialState = {\n    users: [],\n    isFetching: false,\n    assignedUsers: [],\n    userBooks: {}\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USERS:\n            return {\n                ...state,\n                users: action.users\n            };\n        case SET_ASSIGNED_USERS:\n            return {\n                ...state,\n                assignedUsers: action.users\n            }\n        case SET_IS_FETCHING:\n            return {\n                ...state,\n                isFetching: action.status\n            }\n        case SET_USER_BOOKS:\n            return {\n                ...state,\n                userBooks: action.books\n            }\n        case CLEAR_STATE:\n            return {\n                ...initialState\n            }\n        default:\n            return {\n                ...state\n            };\n    };\n}\n\nexport default reducer;","import { combineReducers } from 'redux';\nimport sourceReducer from './sourceReducer';\nimport authReducer from './authReducer';\nimport dialogReducer from './dialogReducer';\nimport projectReducer from './projectReducer';\nimport organisationReducer from './organisationReducer';\nimport userReducer from './userReducer';\n\nconst rootReducer = combineReducers({\n    sources: sourceReducer,\n    auth: authReducer,\n    dialog: dialogReducer,\n    project: projectReducer,\n    organisation: organisationReducer,\n    user: userReducer,\n});\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}